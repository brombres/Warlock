nativeHeader @|void test_fetch();

nativeCode
@|#include <emscripten/fetch.h>
 |
 |void downloadSucceeded(emscripten_fetch_t *fetch) {
 |  printf("Finished downloading %llu bytes from URL %s.\n", fetch->numBytes, fetch->url);
 |  // The data is now available at fetch->data[0] through fetch->data[fetch->numBytes-1];
 |  emscripten_fetch_close(fetch); // Free data associated with the fetch.
 |}
 |
 |void downloadFailed(emscripten_fetch_t *fetch) {
 |  printf("Downloading %s failed, HTTP failure status code: %d.\n", fetch->url, fetch->status);
 |  emscripten_fetch_close(fetch); // Also free data on failure.
 |}
 |
 |void test_fetch()
 |{
 |  emscripten_fetch_attr_t attr;
 |  emscripten_fetch_attr_init(&attr);
 |  strcpy(attr.requestMethod, "GET");
 |  attr.attributes = EMSCRIPTEN_FETCH_LOAD_TO_MEMORY;
 |  attr.onsuccess = downloadSucceeded;
 |  attr.onerror = downloadFailed;
 |  emscripten_fetch(&attr, "Downloads/Macross.png");
 |}


native @|test_fetch();

 #@trace Bitmap(File("Assets/Images/Macross.png")).size

nativeCode
@|
 |#include <SDL.h>
 |#include <emscripten.h>
 |#include <stdlib.h>
 |
 |SDL_Window *window;
 |SDL_Renderer *renderer;
 |SDL_Surface *surface;
 |
 |void drawRandomPixels() {
 |  if (SDL_MUSTLOCK(surface)) SDL_LockSurface(surface);
 |
 |  Uint8 * pixels = surface->pixels;
 |
 |  for (int i=0; i < 1048576; i++) {
 |      char randomByte = rand() % 255;
 |      pixels[i] = randomByte;
 |  }
 |
 |  if (SDL_MUSTLOCK(surface)) SDL_UnlockSurface(surface);
 |
 |  SDL_Texture *screenTexture = SDL_CreateTextureFromSurface(renderer, surface);
 |
 |  SDL_RenderClear(renderer);
 |  SDL_RenderCopy(renderer, screenTexture, NULL, NULL);
 |  SDL_RenderPresent(renderer);
 |
 |  SDL_DestroyTexture(screenTexture);
 |}
 |
 |int main(int argc, char* argv[])
 |{
 |  Rogue_configure( argc, argv );
 |  Rogue_launch();
 |
 |  SDL_Init(SDL_INIT_VIDEO);
 |  SDL_CreateWindowAndRenderer(512, 512, 0, &window, &renderer);
 |  surface = SDL_CreateRGBSurface(0, 512, 512, 32, 0, 0, 0, 0);
 |
 |  emscripten_set_main_loop(drawRandomPixels, 0, 1);
 |}
