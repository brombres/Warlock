# To run this build file, install Rogue from github.com/brombres/Rogue then cd
# to this folder and type "rogo" at the command line, or "rogo help" for a list
# of supported commands.

$define SDL_BRANCH "release-3.2.x"

$requireRogue "2.34.3"

uses Utility/GitRepo
uses Utility/VersionNumber

#$ LINK_LIBS            = true
   # Link the following in when compiling this Build.rogue

#$ LIBRARIES(macOS)   = libjpeg
#$ LIBRARIES(macOS)   = libpng
#$ LIBRARIES(macOS)   = zlib(flags:-lz)

#$ LIBRARIES(Linux)   = libjpeg(install:libjpeg-dev)
#$ LIBRARIES(Linux)   = libpng(install:libpng-dev)

#$ LIBRARIES(Windows) = brombres/windowsmedialibs
#$ CC_LINK(macOS)     = -I /System/Libraries/Frameworks -framework Foundation -framework AppKit
#$ CC_LINK(Windows)   = /link /LTCG

uses Graphics
uses Graphics/BitmapIO

augment Build
  PROPERTIES
    shader_name_pairs =
    @[
      ["-vs","-fs"],
      ["vs-","fs-"],
      ["_vs","_fs"],
      ["vs_","fs_"],
      ["-vert","-frag"],
      ["vert-","frag-"],
      ["_vert","_frag"],
      ["vert_","frag_"]
    ]
endAugment

routine rogo_macos_open
  open_xcode( "Platforms/macOS" )
endRoutine

routine rogo_clean
  print_cmd( "Delete Build/" )
  File("Build").delete
endRoutine

routine rogo_assets( platform=null:String )
  if (not String.exists(platform)) platform = System.os
  rogo_deps
  compile_assets( platform )
endRoutine

routine rogo_shaders( platform=null:String )
  if (not String.exists(platform)) platform = System.os

  local dest = File( "Build/$/Assets/Shaders"(platform) )
  ensure_folder( dest )

  local shaderc : String
  local platform_flags : String
  which (platform)
    case "macOS"
      shaderc = "Libraries/bgfx/.build/osx-arm64/bin/shadercRelease"
      platform_flags = "--platform osx --profile metal"
    others
      println "[SHADERS] No shader build process is defined for platform '$'."(platform)
      return
  endWhich

  platform_flags .= appending( "-i Libraries/bgfx/src" )
  platform_flags .= appending( "--varyingdef Libraries/Warlock/Libraries/Shaders/varying.def.sc" )

  local vs_cmd = "$ --type vertex"(shaderc).appending( platform_flags )
  local fs_cmd = "$ --type fragment"(shaderc).appending( platform_flags )

  local files = Files( ".", "Libraries/Warlock/Libraries/Shaders/*" )
  files.add( "Assets/Shaders/*" )

  local varying_defs = File( "Libraries/Warlock/Libraries/Shaders/varying.def.sc" )

  local pairs = organize_shader_pairs( files->String[] )

  local header_shown = false
  forEach (pair in pairs)
    local src_vs = File( pair//vs )
    local src_fs = File( pair//fs )
    local dest_vs = (dest / src_vs.filename).with_extension( ".bin" )
    local dest_fs = (dest / src_fs.filename).with_extension( ".bin" )

    if (src_vs.is_newer_than(dest_vs) or varying_defs.is_newer_than(dest_vs))
      header_shown = banner( "Compiling shaders", &skip=header_shown )
      execute vs_cmd.appending( "-f $ -o $"(src_vs.esc,dest_vs.esc) )
    endIf

    if (src_fs.is_newer_than(dest_fs) or varying_defs.is_newer_than(dest_fs))
      header_shown = banner( "Compiling shaders", &skip=header_shown )
      execute fs_cmd.appending( "-f $ -o $"(src_fs.esc,dest_fs.esc) )
    endIf
  endForEach
endRoutine

routine organize_shader_pairs( filepaths:String[] )->Variant
  local result = @[]

  while (filepaths.count)
    local vs = find_shader( filepaths, 0 )
    if (vs)
      local fs : String
      local vs_lc = vs.to_lowercase
      forEach (pair in Build.shader_name_pairs)
        fs = find_shader( filepaths, vs_lc, pair.first, pair.last )
        if (fs)
          result.add( @{vs,fs} )
          escapeForEach
        endIf
      endForEach
    else
      local fs = find_shader( filepaths, 1 )
      if (fs)
        println "[WARNING] Fragment shader '$' has no corresponding vertex shader - skipping."(fs)
      else
        filepaths.clear
      endIf
    endIf
  endWhile

  return result
endRoutine

routine find_shader( filepaths:String[], pair_index:Int )->String
  forEach (pair in Build.shader_name_pairs)
    local result = filepaths.remove_first( $.contains(pair[pair_index],&ignore_case) )
    if (result) return result
  endForEach
  return null
endRoutine

routine find_shader( filepaths:String[], filepath:String, replace_old:String, replace_new:String )->String
  local look_for = filepath.replacing( replace_old, replace_new )
  if local match = filepaths.remove_first( $.equals(look_for,&ignore_case) )
    return match
  else
    return null
  endIf
endRoutine

routine rogo_deps [append]
  # SYNTAX: rogo deps [update|rebuild] [<libs>]*
  # Where <libs> is any combination of: [bgfx bimg bx sdl spine stb]

  local args = System.command_line_arguments.cloned
  local rebuild = args.remove( "rebuild" )
  local update  = args.remove( "update" )
  deps( args, &=update, &=rebuild )
endRoutine

routine deps( args:String[], &update, &rebuild )
  if (Files(".","BuildWarlock.rogue").count == 1)
    banner "ERROR: Rogo should not be run directly in the Warlock library folder."
    System.exit 1
  endIf

  ensure_folder( File("Assets/Audio") )
  ensure_folder( File("Assets/Data") )
  ensure_folder( File("Assets/Fonts") )

  ensure_folder( File("Build/macOS/Assets") )
  ensure_folder( File("Build/macOS/Source") )
  ensure_folder( File("Source") )

  create_default_asset_config

  local libs = @{}
  local select_all = false
  loop 2
    forEach (lib in ["bgfx","bimg","bx","sdl","spine","stb"])
      if (select_all or args.contains(lib)) libs[lib] = true
    endForEach
    if (libs.count) escapeLoop
    select_all = true
  endLoop

  ensure_folder( File("Libraries") )

  -------- Libraries/bx --------
  if (libs//bx)
    local folder = File("Libraries/bx")
    local repo = GitRepo( "https://github.com/bkaradzic/bx.git", folder )

    if (not repo.exists)
      banner "Cloning BX repo"
      repo.clone( &verbose )

    elseIf (update)
      if (repo.has_remote_changes)
        banner "Updating BX repo"
        repo.pull( &verbose )
      endIf
    endIf
  endIf

  -------- Libraries/bimg --------
  if (libs//bimg)
    local folder = File("Libraries/bimg")
    local repo = GitRepo( "https://github.com/bkaradzic/bimg.git", folder )

    if (not repo.exists)
      banner "Cloning BIMG repo"
      repo.clone( &verbose )

    elseIf (update)
      if (repo.has_remote_changes)
        banner "Updating BIMG repo"
        repo.pull( &verbose )
      endIf
    endIf
  endIf

  -------- Libraries/bgfx --------
  if (libs//bgfx)
    local folder = File("Libraries/bgfx")
    local repo = GitRepo( "https://github.com/bkaradzic/bgfx.git", folder )

    local needs_rebuild = false
    if (not repo.exists)
      banner "Cloning BGFX repo"
      repo.clone( &verbose )
      needs_rebuild = true

    elseIf (update)
      if (repo.has_remote_changes)
        banner "Updating BGFX repo"
        repo.pull( &verbose )
        needs_rebuild = true
      endIf
    endIf

    contingent
      sufficient needs_rebuild
      if (System.is_macos) necessary File("Libraries/bgfx/.build/osx-arm64").exists
    unsatisfied
      needs_rebuild = true
    endContingent

    if (needs_rebuild)
      # https://bkaradzic.github.io/bgfx/build.html
      if (System.is_macos)
        banner "Building BGFX library"
        #execute "cd Libraries/bgfx && ../bx/tools/bin/darwin/genie --with-tools --gcc=osx-x64 gmake"
        execute( "cd Libraries/bgfx && make osx-arm64" )
      else
        trace "TODO"
      endIf
    endIf
  endIf

  -------- Libraries/SDL --------
  if (libs//sdl)
    local folder = File("Libraries/SDL")
    local repo = GitRepo( "https://github.com/libsdl-org/SDL.git", folder )

    if (not repo.exists)
      banner "Cloning SDL repo"
      repo.clone( SDL_BRANCH, &verbose )

    elseIf (update)
      if (repo.branch != SDL_BRANCH) repo.checkout( SDL_BRANCH, &verbose )

      if (repo.has_remote_changes)
        banner "Updating SDL repo"
        repo.pull( &verbose )
      endIf
    endIf
  endIf

  -------- Libraries/spine --------
  if (libs//spine)
    local folder = File("Libraries/spine-runtimes")
    local repo = GitRepo( "https://github.com/EsotericSoftware/spine-runtimes.git", folder )

    if (not repo.exists)
      banner "Cloning spine repo"
      repo.clone( &verbose )

    elseIf (update)
      if (repo.has_remote_changes)
        banner "Updating spine repo"
        repo.pull( &verbose )
      endIf
    endIf
  endIf

  -------- Libraries/stb --------
  if (libs//stb)
    local folder = File("Libraries/stb")
    local repo = GitRepo( "https://github.com/nothings/stb.git", folder )

    if (not repo.exists)
      banner "Cloning stb repo"
      repo.clone( &verbose )

    elseIf (update)
      if (repo.has_remote_changes)
        banner "Updating stb repo"
        repo.pull( &verbose )
      endIf
    endIf
  endIf

endRoutine

routine create_default_asset_config
  local file = File( "Assets/AssetConfig.asc" )
  if (file.exists) return

  print_cmd( "Create $"(file) )
  local default =
  @|# AssetConfig.asc

  file.save( default )
endRoutine

routine rogo_debug
  rogo_build_debug
  #rogo_run
endRoutine

routine rogo_build( &rebuild )
  #rogo_build_debug( &=rebuild )
  build( System.os, &=rebuild )
endRoutine

routine rogo_rebuild
  rogo_build( &rebuild )
endRoutine

routine rogo_macos
  # SYNTAX: rogo macos [rebuild|release]
  local args = System.command_line_arguments
  #local debug   = args.contains("debug") or not args.contains("release")
  local debug   = args.contains("debug")
  local rebuild = args.contains("rebuild")
  #execute "cd ~/Projects/Rogue && rogo libs"
  #rebuild = true
  build( "macOS", &=debug, &=rebuild )
endRoutine

routine rogo_build_debug( &rebuild )
  build( System.os, &debug, &=rebuild )
endRoutine

routine build( platform:String, &debug, &rebuild )
  deps( System.command_line_arguments )
  compile_rogue( platform, &=debug, &=rebuild )
  compile_assets( platform )
endRoutine

routine compile_rogue( platform:String, &debug, &rebuild )
  local files = Files( ".", "Libraries/Warlock/Libraries/Rogue/**.rogue" )
  files.add( "Source/**.rogue" )
  local source_folder = File("Build/$/Source"(platform)).[create_folder]

  local is_apple = (platform == "macOS" or platform == "iOS")
  local source_filename = "RogueProgram.$"(which{ is_apple:"mm" || "cpp" })
  if (rebuild or files.any_newer_than(source_folder/source_filename))
    block cmd = "roguec Source/Main.rogue Warlock"
      cmd .= appending( "Warlock/SDL" )
      cmd .= appending( "Warlock/BGFX" )
      cmd .= appending( "Warlock/Platform/$.rogue"(platform) )
      if (debug) cmd .= appending( "--debug" )

      local libs = String[]
      libs.add( "Libraries/Warlock/Libraries/Rogue" )
      cmd .= appending( "--libraries=$"(libs.join(',')) )

      local targets = String[]
      targets.add( "C++,Warlock,$"(platform) )
      if (is_apple) targets.add( "ObjC" )
      targets.add( "SDL" )
      targets.add( "bgfx" )
      cmd .= appending( "--target=$"(targets.join(',')) )
      cmd .= appending( "--gc=manual" )
      cmd .= appending( "--output=$/RogueProgram"(source_folder.esc) )
      execute cmd
    endBlock
  endIf
endRoutine

routine compile_assets( platform:String )
  contingent
    local path = "Libraries/Warlock/Libraries/Rogue/AssetCompiler"
    necessary (0 == System.run("(cd $ && rogo build)"(path)))
    necessary (0 == System.run("$/Build/AssetCompiler-$ $" (path,System.os,System.os)))
  unsatisfied
    System.exit 1
  endContingent

  rogo_shaders( platform )
endRoutine

routine open_xcode( folder:String )
  local listing = File( folder ).listing( "*.xcworkspace" )
  if (listing.is_empty) listing = File( folder ).listing( "*.xcodeproj" )
  if (listing.count)
    execute ''open "$"'' (forEach in listing)
  else
    throw Error( "No .xcodeproj or .xcworkspace folders found." )
  endIf
endRoutine

