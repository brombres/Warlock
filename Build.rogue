# To run this build file, install Rogue from github.com/brombres/Rogue then cd
# to this folder and type "rogo" at the command line, or "rogo help" for a list
# of supported commands.

$define GLM_TAG    "1.0.0"
$define SDL_BRANCH "release-2.30.x"

$requireRogue "2.34"

#$ LIBRARIES(macOS) = sdl2
#$ LIBRARIES(Linux) = libsdl2-dev(sdl2) libsdl2-mixer-dev(SDL2_mixer)

uses Utility/GitRepo
uses Utility/VersionNumber

routine rogo_t
  local cmd =  "g++ Test.cpp"
  cmd .= appending( "Libraries/Balefire/CPP/Source/Core/String.cpp" )
  cmd .= appending( "-I Libraries/Balefire/CPP/Headers" )
  cmd .= appending( "-Wall -fno-strict-aliasing -std=c++11 -o test" )
  cmd .= appending( "&& ./test" )
  execute cmd
endRoutine

routine rogo_shaders
  execute @|glslang Shader.vert -V -o vert.spv
  execute @|glslang Shader.frag -V -o frag.spv
  execute @|binsrc vert.spv frag.spv
endRoutine

routine rogo_default
  rogo_deps
  rogo_help
endRoutine

routine rogo_debug
  rogo_build_debug
  rogo_run
endRoutine

routine rogo_build( &rebuild )
  #rogo_build_debug( &=rebuild )
  build( System.os, &=rebuild )
endRoutine

routine rogo_rebuild
  rogo_build( &rebuild )
endRoutine

routine rogo_macos
  # SYNTAX: rogo macos [rebuild|release]
  local args = System.command_line_arguments
  #local debug   = args.contains("debug") or not args.contains("release")
  local debug   = args.contains("debug")
  local rebuild = args.contains("rebuild")
  build( "macOS", &=debug, &=rebuild )
endRoutine

routine rogo_macos_open
  execute @|open Platforms/macOS/Warlock-macOS.xcodeproj
endRoutine

routine rogo_build_debug( &rebuild )
  build( System.os, &debug, &=rebuild )
endRoutine

routine build( platform:String, &debug, &rebuild )
  deps( System.command_line_arguments )
  compile_rogue( platform, &=debug, &=rebuild )
  compile_assets( platform )
endRoutine

routine compile_rogue( platform:String, &debug, &rebuild )
  local files = Files( "Libraries/Warlock/Rogue/**.rogue" )
  local source_folder = File("Build/$/Source"(platform)).[create_folder]

  local is_apple = (platform == "macOS" or platform == "iOS")
  local source_filename = "RogueProgram.$"(which{ is_apple:"mm" || "cpp" })
  if (rebuild or files.any_newer_than(source_folder/source_filename))
    block cmd = "roguec Warlock"
      cmd .= appending( "Warlock/Platform/$.rogue"(platform) )
      if (debug) cmd .= appending( "--debug" )
      cmd .= appending( "--libraries=Libraries/Warlock/Rogue" )
      cmd .= appending( "--target=C++,Warlock,SDL,Vulkan,$"(platform) )
      if (is_apple) cmd += ",ObjC"
      cmd .= appending( "--gc=manual" )
      cmd .= appending( "--output=$/RogueProgram"(source_folder.esc) )
      execute cmd
    endBlock
  endIf
endRoutine

routine compile_assets( platform:String )
  local src  = Files( "Assets" )
  src.add( "Images/**" )
  local dest = File( "Build/macOS/Assets" )
  src.sync_to( dest, &verbose )
endRoutine

  #{
  block cmd = "g++ -Wall -fno-strict-aliasing"
    # Build/RogueC-macOS.c -o Build/RogueC-macOS -lm -I/opt/homebrew/Cellar/jpeg-turbo/3.0.0/include /opt/homebrew/Cellar/jpeg-turbo/3.0.0/lib/libjpeg.a -I/opt/homebrew/opt/libpng/include/libpng16 /opt/homebrew/opt/libpng/lib/libpng.a -lz"

    if debug then cmd .= appending( "-O0" )
    else          cmd .= appending( "-O3" )

    cmd .= appending( "-std=c++11" )
    cmd .= appending( "$/RogueProgram.cpp"(source_folder) )
    cmd .= appending( "-o $/Warlock"(product_folder) )
    cmd .= appending( "-lm" )
    cmd .= appending( "$LIBRARY_FLAGS" )
    #cmd .= appending( "-lSDL2main" )
    cmd .= appending( "-lvulkan" )
    #g++ -std=c++11 *.cpp -o vulkan -lSDL2main -lSDL2 -lvulkan
    #-I/opt/homebrew/Cellar/jpeg-turbo/3.0.0/include /opt/homebrew/Cellar/jpeg-turbo/3.0.0/lib/libjpeg.a -I/opt/homebrew/opt/libpng/include/libpng16 /opt/homebrew/opt/libpng/lib/libpng.a -lz
    execute cmd
  endBlock
  }#

  #cmd = "emcc -Wall -fno-strict-aliasing"
  #cmd .= appending("-O3")
  #cmd .= appending("-s ALLOW_MEMORY_GROWTH=1 -s USE_SDL=2 -s USE_LIBPNG=1 -s FETCH")
  #cmd .= appending("--embed-file=Assets/Internal@Internal")
  #cmd .= appending("--shell-file Source/index.html")
  #cmd .= appending("-sMODULARIZE")
  #cmd .= appending("-sEXPORT_ES6")
  #cmd .= appending("-sENVIRONMENT=web")
  #cmd .= appending(''-sEXPORTED_FUNCTIONS="['_main']"'')
  #cmd .= appending("Build/Web/Source/RogueProgram.c")
  #cmd .= appending("-o Build/Web/Product/Warlock.html")
  #execute cmd

  #block file = File("Build/Web/Product/Warlock.html")
  #  if (file.exists) file.rename("Build/Web/Product/index.html")
  #endBlock

  #Files("Assets/Downloads/**").sync_to( "Build/Web/Product/Assets", &verbose )

routine rogo_run
  trace "TODO: run"
  #run( System.os )
endRoutine

routine run( platform:String )
  execute "Build/$/Product/Warlock"(platform)
endRoutine

routine rogo_deps
  # SYNTAX: rogo deps [update|rebuild] [moltenvk|sdl|glm|glslang]
  local args = System.command_line_arguments
  local rebuild = args.contains( "rebuild" )
  local update  = args.contains( "update" )
  deps( args, &=update, &=rebuild )
endRoutine

routine deps( args:String[], &update, &rebuild )
  local libs = @{}
  local select_all = false
  loop 2
    if (select_all or args.contains("moltenvk")) libs//moltenvk = true
    if (select_all or args.contains("sdl"))      libs//sdl      = true
    if (select_all or args.contains("glm"))      libs//glm      = true
    if (select_all or args.contains("glslang"))  libs//glslang  = true
    if (args.count) escapeLoop
    select_all = true
  endLoop

  if (not File("Libraries").exists)
    println "> Create Libraries/"
    File("Libraries").create_folder
  endIf

  -------- Libraries/MoltenVK --------
  if System.is_macos
    local rebuild_vulkan = rebuild and libs//moltenvk
    local folder = File("Libraries/MoltenVK")
    local repo = GitRepo( "https://github.com/KhronosGroup/MoltenVK.git", folder )
    if (not repo.exists)
      banner "Cloning MoltenVK repo"
      repo.clone( "main", &verbose )
      rebuild_vulkan = true

    elseIf (update and libs//moltenvk and repo.has_remote_changes)
      banner "Updating MoltenVK repo"
      repo.pull( &verbose )
      rebuild_vulkan = true
    endIf

    if (rebuild_vulkan or not (folder/"External/build/Release").exists)
      execute @|cd Libraries/MoltenVK && ./fetchDependencies --macos --ios --iossim
    endIf

    local release_folder = folder/"Package/Release/MoltenVK/static/MoltenVK.xcframework"

    if (rebuild_vulkan or not (release_folder/"macos-arm64_x86_64").exists)
      banner "Building MoltenVK for macOS"
      local cmd = "cd Libraries/MoltenVK"
      execute "cd $ && make macos"(folder.esc)
    endIf

    if (rebuild_vulkan or not (release_folder/"ios-arm64").exists)
      banner "Building MoltenVK for iOS"
      execute "cd $ && make ios"(folder.esc)
    endIf

    if (rebuild_vulkan or not (release_folder/"ios-arm64_x86_64-simulator").exists)
      banner "Building MoltenVK for iOS Simulator"
      execute "cd $ && make iossim"(folder.esc)
    endIf
  endIf

  -------- Libraries/SDL --------
  block
    local folder = File("Libraries/SDL")
    local repo = GitRepo( "https://github.com/libsdl-org/SDL.git", folder )

    if (not repo.exists)
      banner "Cloning SDL repo"
      repo.clone( SDL_BRANCH, &verbose )

    elseIf (update and libs//sdl)
      if (repo.branch != SDL_BRANCH) repo.checkout( SDL_BRANCH, &verbose )

      if (repo.has_remote_changes)
        banner "Updating SDL repo"
        repo.pull( &verbose )
      endIf
    endIf
  endBlock

  -------- Libraries/glm --------
  block
    local folder = File("Libraries/glm")
    local repo = GitRepo( "https://github.com/g-truc/glm.git", folder )

    if (not repo.exists)
      banner "Cloning GLM repo"
      repo.clone( GLM_TAG, &verbose )

    elseIf (update and libs//glm)
      if (repo.tag != GLM_TAG) repo.checkout( GLM_TAG, &verbose )

      if (repo.has_remote_changes)
        banner "Updating GLM repo"
        repo.pull( &verbose )
      endIf
    endIf
  endBlock

  -------- Libraries/glslang --------
  block
    local folder = File("Libraries/glslang")
    local repo = GitRepo( "https://github.com/KhronosGroup/glslang.git", folder )
    local rebuild_glslang = rebuild and libs//glslang

    if (not repo.exists)
      banner "Cloning glslang repo"
      repo.clone( &verbose )
      rebuild_glslang = true

    elseIf (update and libs//glslang)
      if (repo.has_remote_changes)
        banner "Updating glslang repo"
        repo.pull( &verbose )
        rebuild_glslang = true
      endIf
    endIf

    if (rebuild_glslang or not (folder/"External").contains("spirv-tools"))
      rebuild_glslang = true
      execute "cd Libraries/glslang && ./update_glslang_sources.py"
    endIf

    local build_folder = folder/"build"
    if (rebuild_glslang or not build_folder.exists)
      rebuild_glslang = true
      local install_folder = build_folder.abs/"install"
      File( "Libraries/glslang/build" ).create_folder
      File( "Libraries/glslang/External/spirv-tools/build" ).create_folder
      if (System.is_windows)
        execute ''cd Libraries/glslang/build && cmake .. -DCMAKE_INSTALL_PREFIX="$"'' (install_folder)
        execute ''cd Libraries/glslang/External/spirv-tools/build && cmake .. -DCMAKE_INSTALL_PREFIX="$"''...
                (install_folder)

      #elseIf (<targeting android>)
      #  cmake $SOURCE_DIR -G "Unix Makefiles" -DCMAKE_INSTALL_PREFIX="$(pwd)/install" -DANDROID_ABI=arm64-v8a -DCMAKE_BUILD_TYPE=Release -DANDROID_STL=c++_static -DANDROID_PLATFORM=android-24 -DCMAKE_SYSTEM_NAME=Android -DANDROID_TOOLCHAIN=clang -DANDROID_ARM_MODE=arm -DCMAKE_MAKE_PROGRAM=$ANDROID_NDK_HOME/prebuilt/linux-x86_64/bin/make -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK_HOME/build/cmake/android.toolchain.cmake
      # If on Windows will be -DCMAKE_MAKE_PROGRAM=%ANDROID_NDK_HOME%\prebuilt\windows-x86_64\bin\make.exe
      # -G is needed for building on Windows
      # -DANDROID_ABI can also be armeabi-v7a for 32 bit

      else
        # Linux/macOS
        execute ''cd Libraries/glslang/build && cmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX="$"''...
                (install_folder)
        execute ''cd Libraries/glslang/External/spirv-tools/build && cmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX="$"''...
                (install_folder)
      endIf
    endIf

    if (rebuild_glslang or not (build_folder/"install/lib/libglslang.a").exists)
      rebuild_glslang = true
      if (System.is_windows)
        execute "cd Libraries/glslang && cmake --build . --config Release --target install"
      else
        execute "cd Libraries/glslang/build && make -j4 install"
      endIf
    endIf

    if (rebuild_glslang or not (build_folder/"install/lib/libSPIRV-Tools.a").exists)
      rebuild_glslang = true
      if (System.is_windows)
        execute "cd Libraries/glslang/External/spirv-tools && cmake --build . --config Release --target install"
      else
        execute "cd Libraries/glslang/External/spirv-tools/build && make -j4 install"
      endIf
    endIf

    if (rebuild_glslang)
      println "glslang Build Products"
      println "  " + build_folder/"install/include"
      forEach (filepath in File(build_folder/"install/lib").listing)
        println "  " + filepath
      endForEach
    endIf

    #cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX="/Users/abe/Projects/Warlock/Libraries/glslang/build/install" ..

  endBlock

endRoutine

#{
WEB BUILD
routine rogo_build_debug
  rogo_deps

  local bundled = File("Assets/Internal")
  bundled.create_folder
  if (bundled.listing.is_empty)
    (bundled/"Empty.txt").save( "Placeholder" )
  endIf

  File("Build/Web/Product").create_folder
  File("Build/Web/Source").create_folder

  local cmd = "roguec Source/Main.rogue Warlock"
  cmd .= appending( "--libraries=Libraries/Rogue" )
  cmd .= appending( "--target=C,Warlock,SDL,OpenGL,Web" )
  cmd .= appending( "--gc=manual" )
  cmd .= appending( "--output=Build/Web/Source/RogueProgram" )
  execute cmd

  cmd = "emcc -Wall -fno-strict-aliasing"
  cmd .= appending("-O3")
  cmd .= appending("-s ALLOW_MEMORY_GROWTH=1 -s USE_SDL=2 -s USE_LIBPNG=1 -s FETCH")
  cmd .= appending("--embed-file=Assets/Internal@Internal")
  cmd .= appending("--shell-file Source/index.html")
  cmd .= appending("-sMODULARIZE")
  cmd .= appending("-sEXPORT_ES6")
  cmd .= appending("-sENVIRONMENT=web")
  cmd .= appending(''-sEXPORTED_FUNCTIONS="['_main']"'')
  cmd .= appending("Build/Web/Source/RogueProgram.c")
  cmd .= appending("-o Build/Web/Product/Warlock.html")
  #cmd .= appending("--emrun")
  #cmd .= appending("-o src/routes/warlock/Warlock.js")
  execute cmd

  block file = File("Build/Web/Product/Warlock.html")
    if (file.exists) file.rename("Build/Web/Product/index.html")
  endBlock

  Files("Assets/Downloads/**").sync_to( "Build/Web/Product/Assets", &verbose )
endRoutine

routine rogo_run
  execute "emrun --browser chrome Build/Web/Product/index.html"
endRoutine

routine rogo_deps
  local index_html = File( "Source/index.html" )
  if (not index_html.exists)
    File("Libraries/Framework/Web/index.html").copy_to( index_html )
  endIf
endRoutine
}#

routine rogo_clean
  block folder = File("Build")
    if (folder.exists)
      println "> Delete $"(folder)
      folder.delete
    endIf
  endBlock
endRoutine

routine banner( content:String, w=Console.width:Int )
  if w == 0 then w = 80

  local n = w.or_smaller(100)
  content .= word_wrapped( n-2 )

  println "┌$┐" ("─"*(n-2))
  forEach (line in content.split('\n'))
    println "│$$│"(line," "*(n-(line.count+2)))
  endForEach
  println "└$┘" ("─"*(n-2))
endRoutine

routine execute( commands:String, error_message=null:String, &suppress_error )->Logical
  forEach (cmd in LineReader(commands))
    ConsoleStyle.set<<FG_LIGHT_GREEN>>
    print( "> " )
    println( cmd )
    ConsoleStyle.set<<FG_DEFAULT>>
    if (0 != System.run(cmd))
      if (suppress_error)
        return false
      else
        if (not error_message) error_message = "Build failed."
        throw Error( error_message )
      endIf
    endIf
  endForEach
  return true
endRoutine

#-------------------------------------------------------------------------------
# Introspection-based Launcher Framework
#-------------------------------------------------------------------------------
# Rogo is a "build your own build system" facilitator. At its core Rogo just
# recompiles build files if needed and then runs the build executable while
# forwarding any command line arguments. This file contains a default framework
# which uses introspection to turn command line arguments into parameterized
# routine calls.

# Example: to handle the command "rogo abc xyz 5", define
# "routine rogo_abc_xyz( n:Int )".

# "rogo_default" will run in the absence of any other command line argument.

# The following "comment directives" can be used in this file to control how
# RogueC compiles it and to manage automatic dependency installation and
# linking.

# Each of the following should be on a line beginning with the characters #$
# (preceding whitespace is fine). Sample args are given.

#   ROGUEC       = roguec       # Path to roguec to compile this file with
#   ROGUEC_ARGS  = --whatever   # Additional options to pass to RogueC
#   CC           = gcc -Wall -fno-strict-aliasing
#   CC_ARGS      = -a -b -c          # Additional C args
#   LINK         = -lalpha -lbeta    # Link this build file with these options
#   LINK(macOS)  = ...               # Options applying only to
#                                    # System.os=="macOS" (use with any OS and
#                                    # any comment directive)
#   LINK_LIBS    = true              # Links following LIBRARIES with this Build
#                                    # file (otherwise just installs them)
#   LINK_LIBS    = false             # Linking turned off for following
#                                    # LIBRARIES - info can still be obtained
#                                    # from $LIBRARY_FLAGS or $LIBRARIES(libname,...)
#   LIBRARIES    = libalpha
#   LIBRARIES    = libbeta(library-name)
#   LIBRARIES    = libfreetype6-dev(freetype2)
#   DEPENDENCIES = Library/Rogue/**/*.rogue
#
#   LIBRARIES    = name(package)
#   LIBRARIES    = name(
#                    exe:<which-name>
#                    exists-cmd:<exists-cmd>
#                    flags:<library-flags>
#                    ignore-exe-only:<setting>
#                    info:<info-name>
#                    info-cmd:<get-info-cmd>
#                    install:<install-name>
#                    install-cmd:<install-cmd>
#                    link:<setting>
#                    package:<package-name>
#                  )
#
# The following macro is replaced within this file (Build.rogue) - the libraries
# should normally also be declared in #$ LIBRARIES:
#
#   $LIBRARY_FLAGS(lib1,lib2)                              # sample macro
#     ->
#   -Ipath/to/lib1/include -Lpath/to/lib1/library -I ...   # sample replacement

routine syntax( command:String, text:String )
  Build.rogo_syntax[ command ] = text
endRoutine

routine description( command:String, text:String )
  Build.rogo_descriptions[ command ] = text
endRoutine

routine help( command:String, description_text=null:String, syntax_text=null:String )
  if (description_text) description( command, description_text )
  if (syntax_text)      syntax( command, syntax_text )
endRoutine

try
  Build.launch
catch (err:Error)
  Build.rogo_error = err
  Build.on_error
endTry

class Build [singleton]
  PROPERTIES
    rogo_syntax         = [String:String]
    rogo_descriptions   = [String:String]
    rogo_prefix         = "rogo_"
    rogo_command        = "default"
    rogo_args           = @[]
    rogo_error          : Error

    LOCAL_SETTINGS_FILE = "Local.rogo"

  METHODS
    method launch
      rogo_args.add( forEach in System.command_line_arguments )
      read_defs
      on_launch
      parse_args
      dispatch_command

    method dispatch_command
      local m = find_command( rogo_command )
      if (not m) throw Error( "No such routine rogo_$()" (rogo_command) )

      local args = @[]
      forEach (arg in rogo_args)
        which (arg)
          case "true":  args.add( true )
          case "false": args.add( false )
          case "null":  args.add( null )
          others:       args.add( arg )
        endWhich
      endForEach
      m( args )

    method find_command( name:String )->MethodInfo
      return <<Routine>>.find_global_method( rogo_prefix + name )

    method on_error
      local w = Console.width.or_smaller( 80 )
      Console.error.println "=" * w
      Console.error.println rogo_error->String.word_wrapped(w)
      Console.error.println "=" * w
      on_exit
      System.exit 1

    method on_command_found
      noAction

    method on_command_not_found
      local w = Console.width.or_smaller( 80 )
      println "=" * w
      println "ERROR: No such command '$'." (rogo_args.first)
      println "=" * w
      println
      rogo_command = "help"
      rogo_args.clear
      on_command_found

    method on_launch
      noAction

    method on_exit
      noAction

    method parse_args
      block
        if (rogo_args.count)
          local parts = String[]
          parts.add( forEach in rogo_args )
          rogo_args.clear

          while (parts.count)
            local cmd = parts.join("_")
            if (find_command(cmd))
              rogo_command = cmd
              on_command_found
              escapeBlock
            endIf
            rogo_args.insert( parts.remove_last )
          endWhile

          on_command_not_found
        endIf

        # Use default command
        on_command_found
      endBlock

    method read_defs
      read_defs( LOCAL_SETTINGS_FILE )

    method read_defs( defs_filepath:String )
      # Attempt to read defs from Local.rogo
      local overrides = String[]
      if (File(defs_filepath).exists)
        forEach (line in LineReader(File(defs_filepath)))
          if (line.contains("="))
            local name  = line.before_first('=').trimmed
            local rhs   = line.after_first('=').trimmed
            local value : Variant
            if (rhs.begins_with('"') or rhs.begins_with('\''))
              value = rhs.leftmost(-1).rightmost(-1)
            elseIf (rhs.begins_with('{') or rhs.begins_with('['))
              value = JSON.parse( rhs )
            else
              value = rhs
            endIf
            local p = <<Build>>.find_property( name )
            if (p)
              overrides.add( "$ = $" (name,value) )
              p.set_value( this, value )
            endIf
          endIf
        endForEach
      endIf

    method _join( value:Variant )->String
      local args = String[]
      args.add( forEach in value )
      return args.join( "_" )
endClass


routine rogo_help( command="":String )
  # SYNTAX: rogo help [command]
  # Displays help for a specified command or else all build commands.
  command = Build._join( Build.rogo_args )
  if (command.count)
    local syntax = get_syntax( command )
    local success = false
    if (syntax)
      println "SYNTAX"
      println "  " + syntax
      println
      success = true
    endIf
    local description = get_description( command )
    if (description)
      description .= replacing("<br>","\n")
      local max_w = Console.width - 2
      println "DESCRIPTION"
      forEach (line in LineReader(description.word_wrapped(max_w)))
        print( "  " )
        println( line )
      endForEach
      println
      success = true
    endIf
    if (success)
      return
    else
      local w = Console.width.or_smaller( 80 )
      println "=" * w
      println "ERROR: No such command '$'." (command)
      println "=" * w
      println
    endIf
  endIf

  println "USAGE"
  local entries = CommandInfo[]
  local max_len = 0
  forEach (m in <<Routine>>.global_methods)
    if (m.name.begins_with(Build.rogo_prefix))
      local name = m.name.after_first( Build.rogo_prefix )
      local entry = CommandInfo( name, get_syntax(name), get_description(name) )
      max_len .= or_larger( entry.syntax.count )
      entries.add entry
    endIf
  endForEach

  entries.sort( $1.name < $2.name )
  max_len += 2

  local max_w = Console.width
  forEach (entry in entries)
    print "  " + entry.syntax
    if (entry.@description)
      local description = entry.@description.before_first( '\n' )
      loop (max_len - entry.syntax.count) print ' '
      contingent
        sufficient (2 + max_len + description.count <= max_w)
        if (description.contains(". "))
          description = description.before_first( ". " ) + "."
          sufficient (max_len + description.count <= max_w)
        endIf
        necessary (max_len + 10 <= max_w)
        description = description.unright( (description.count - (max_w - max_len))+5 ) + "..."
      satisfied
        print description
      endContingent
    endIf
    println
  endForEach
  println
endRoutine

routine get_syntax( m_name:String )->String
  if (Build.rogo_syntax.contains(m_name))
    return "rogo " + Build.rogo_syntax[ m_name ]
  else
    local m = <<Routine>>.find_global_method( Build.rogo_prefix + m_name )
    if (not m) return null
    local line = "rogo $" (m_name.replacing('_',' '))
    line += " <$>" ((forEach in m.parameters).name)
    return line
  endIf
endRoutine


routine get_description( m_name:String )->String
  if (Build.rogo_descriptions.contains(m_name))
    return Build.rogo_descriptions[ m_name ]
  else
    return null
  endIf
endRoutine

class CommandInfo( name:String, syntax:String, description:String );
