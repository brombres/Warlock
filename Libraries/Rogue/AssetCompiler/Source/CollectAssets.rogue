library AssetCompiler

class CollectAssets( target, suppress_errors=false:Logical ) : TargetVisitor
  METHODS
    method on_visit_node( cmd:AssetRule )
      if (not current_target)
        throw cmd.t.error( "A platform target ([Global], [Default], [iOS], ...) must be specified before asset rules are specified." )
      endIf
      cmd.folder = current_folder

      local filepath = (cmd.folder / cmd.filepath)
      if (File(filepath).contains_wildcards)
        local pattern = FilePattern( filepath )
        forEach (existing_asset in AssetCompiler.files)
          if (File(existing_asset).matches(pattern))
            store_asset( existing_asset, cmd )
          endIf
        endForEach
      else
        store_asset( filepath, cmd )
      endIf

    method store_asset( filepath:String, rule:AssetRule )
      if (AssetCompiler.file_lookup.contains(filepath))
        AssetCompiler.file_lookup[filepath] = true  # file is used
        local entry = AssetCompiler.assets.find( filepath )
        if (entry)
          # Later asset rule definitions override early definitions.
          entry.value.rule = rule
        else
          AssetCompiler.assets[filepath] = Asset( filepath, rule )
        endIf
      elseIf (rule instanceOf ExistingAssetRule)
        if (is_target_active and not suppress_errors)
          throw rule.t.error( "File not found '$'."(filepath) )
        endIf
      endIf

    method on_visit_node( cmd:SetTarget )
      prior.on_visit_node( cmd )
      AssetCompiler.targets.add( current_target )
endClass
