library AssetCompiler

class AssetGroup
  PROPERTIES
    id        : Int       # positive integer
    assets    = Asset[]
    filename  : String    # Base filename of texture atlas pages.
    filepaths = String[]  # All atlas pages composing this group.
    pages     : AtlasPage[]

  METHODS
    #{
    method init( group_assets:Asset[], group_info:Variant )
      temporarily assets = group_assets  # assets will be permanently added to group later
        (forEach in assets).group = this
        if local info = group_info[hash]
          id = info//id
          next_id .= or_larger( id )
          filename = info//filename
        else
          init
        endIf
      endTemporarily
      }#

    method configure_id
      if (not id)
        id = GroupIDManager.next_id

        use file_letter = StringPool
          .base26( id-1, file_letter )
          filename = "TextureAtlas-$"(file_letter)
        endUse
      endIf

    method add( asset:Asset )
      assets.add( asset )

    method build_texture_atlas
      pages = ImagePacker( this ).pack( assets )
      (forEach in assets).update_placement_info

    method has_modified_assets->Logical
      if (assets.is_empty) return false
      if ((forEach in assets).is_modified) return true

      if (filepaths.is_empty) return true

      localize newest_timestamp
      forEach (filepath in filepaths)
        local file = File(filepath)
        if (not file.exists or file.timestamp < newest_timestamp) return true
      endForEach

      return false

    method newest_timestamp->Timestamp
      local newest_timestamp = assets.first.timestamp
      newest_timestamp .= or_newer( (forEach in assets from 1).timestamp )
      return newest_timestamp

    method hash->Int
      local result = assets.count
      result ~= ((forEach in assets).filepath.hashcode)
      return result

    method to->Variant
      local result = @{ id, hash, filename, assets:[], pages:[] }

      local asset_filepaths = result//assets
      forEach (asset in assets)
        asset_filepaths.add( asset.filepath )
      endForEach

      local page_filepaths = result//pages
      if (pages)
        forEach (page in pages) page_filepaths.add( page.build_filepath )
      else
        page_filepaths.add( forEach in filepaths )
      endIf

      return result

    method .base26( n:Int, builder:String )
      if (n >= 26) .base26( n/26, builder )
      builder.print( ('A' + (n % 26))->Character )

endClass
