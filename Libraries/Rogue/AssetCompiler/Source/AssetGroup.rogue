library AssetCompiler

class AssetGroup
  PROPERTIES
    id          : Int       # positive integer
    assets      = Asset[]
    filename    : String    # Base filename of texture atlas pages.
    filepaths   = String[]  # All atlas pages composing this group.
    pages       : AtlasPage[]
    attributes  : AttributeList
    is_modified : Logical
    padding     = 8

  METHODS
    #{
    method init( group_assets:Asset[], group_info:Variant )
      temporarily assets = group_assets  # assets will be permanently added to group later
        (forEach in assets).group = this
        if local info = group_info[hash]
          id = info//id
          next_id .= or_larger( id )
          filename = info//filename
        else
          init
        endIf
      endTemporarily
      }#

    method configure_id
      if (not id) id = GroupIDManager.next_id

      use file_letter = StringPool
        .base26( id-1, file_letter )
        filename = "TextureAtlas-$"(file_letter)
      endUse

    method add( asset:Asset )
      assets.add( asset )

    method check_for_changes( info:Variant )
      contingent
        necessary (info//attributes.count == attributes?.count)
        if (attributes)
          forEach (key in info//attributes.keys)
            local attr = attributes.find( key )
            necessary (attr)
            necessary (attr.value.value == info//attributes[key])
          endForEach
        endIf
      unsatisfied
        is_modified = true
      endContingent

    method process
      which (assets.first.type)
        case <Image>, <Font>
          pages = ImagePacker( this ).[padding=padding].pack( assets )
          (forEach in assets).update_placement_info
        case <Binary>
          local output_folder = "Build/$"(AssetCompiler.platform)
          forEach (asset in assets)

            local output_filepath = asset.filepath
            if (not output_filepath.begins_with("Assets/Data/"))
              output_filepath .= after_first( '/' )
              output_filepath .= after_first( '/' )
              output_filepath = "Assets/Data" / output_filepath
            endIf
            output_filepath = output_folder/output_filepath

            if (File(asset.filepath).is_newer_than(File(output_filepath)))
              File( asset.filepath ).copy_to( File(output_filepath), &verbose )
            endIf
          endForEach
      endWhich

    method has_modified_assets->Logical
      if (assets.is_empty) return false
      if (is_modified) return true

      if ((forEach in assets).is_modified) return true

      which (assets.first.type)
        case <Image>, <Font>
          if (filepaths.is_empty) return true
          if ((forEach in assets).placement_info.is_empty) return true

          localize newest_timestamp
          forEach (filepath in filepaths)
            local file = File(filepath)
            if (not file.exists or file.timestamp < newest_timestamp) return true
          endForEach

        case <Binary>
          local output_folder = "Build/$"(AssetCompiler.platform)
          forEach (asset in assets)
            local output_filepath = output_folder/asset.filepath
            if (File(asset.filepath).is_newer_than(File(output_filepath)))
              return true
            endIf
          endForEach
      endWhich

      return false

    method newest_timestamp->Timestamp
      local newest_timestamp = assets.first.timestamp
      newest_timestamp .= or_newer( (forEach in assets from 1).timestamp )
      return newest_timestamp

    method hash->Int
      local result = assets.count
      result ~= ((forEach in assets).filepath.hashcode)
      return result

    method set_id( @id )
      GroupIDManager.mark_id_used( id )

    method set_attributes( @attributes )
      if local attr = attributes.find( "padding" )
        padding = attr.value->Int
      endIf

    method to->String
      return assets->String

    method to->Variant
      local result = @{ id, hash, filename, attributes:{}, assets:[], pages:[] }

      if (attributes)
        local attribute_table = result//attributes
        forEach (attribute in attributes)
          attribute_table[attribute.name] = attribute.value.value
        endForEach
      endIf

      local asset_filepaths = result//assets
      forEach (asset in assets)
        asset_filepaths.add( asset.filepath )
      endForEach

      local page_filepaths = result//pages
      if (pages)
        forEach (page in pages) page_filepaths.add( page.build_filepath )
      else
        page_filepaths.add( forEach in filepaths )
      endIf

      return result

    method .base26( n:Int, builder:String )
      if (n >= 26) .base26( n/26, builder )
      builder.print( ('A' + (n % 26))->Character )

endClass
