library Warlock

class Image : Drawable2D
  GLOBAL METHODS
    method create( name:String )->Image
      return TextureImage( name )

  PROPERTIES
    asset        : AssetInfo
    opacity      = 1.0
    subdivisions = XY(0,0)  # for shader effects - XY(4,0) would draw a mesh composed of 16x1 quads

  METHODS
    method init( size=XY(1,1):XY, color=Color(0) )
      reset_size( size )

    method init( existing:Image )
      prior.init( existing )
      asset        = existing.asset
      opacity      = existing.opacity
      subdivisions = existing.subdivisions

    method fill( color=null:Color? )
      if (not color) color = this.color

      Renderer.fill(
        Box(nominal_size),
        color.value,
        shader||Shader.ALPHA_COLOR,
        subdivisions
      )

    method load
      # Ensures image is fully loaded.
      noAction

    method texture->Texture
      return null

endClass

augment Image[]
  METHODS
    method init( asset_name:String )
      local asset = AssetManager.find_image( asset_name )
      if (asset)
        reserve( asset.image_count )
        forEach (i in 0..<asset.image_count)
          add( TextureImage(asset, i) )
        endForEach
      else
        println "No such image collection: " + asset_name
      endIf

    method reset_size( size:XY )
      (forEach in this).reset_size( size )

    method set_anchor( anchor:Anchor )
      (forEach in this).anchor = anchor

    method set_color( color:Color )
      (forEach in this).color = color

    method set_nominal_size( nominal_size:XY )
      (forEach in this).nominal_size = nominal_size

    method set_opacity( opacity:Real )
      (forEach in this).opacity = opacity

    method set_position( position:XY )
      (forEach in this).position = position

    method set_scale( scale:Real )
      (forEach in this).scale = scale

    method set_scale( scale:XY )
      (forEach in this).scale = scale

    method set_shader( shader:Shader )
      (forEach in this).shader = shader

    method set_size( size:XY )
      (forEach in this).size = size

    method set_size( size:XY, scale:XY )
      (forEach in this).set_size( size, scale )

    method set_subdivisions( subdivisions:XY )
      (forEach in this).subdivisions = subdivisions

    method set_mipmap_level( level:Int )
      (forEach in this).mipmap_level = level

endAugment
