library Warlock

class Image : Drawable2D
  GLOBAL METHODS
    method create( name:String )->Image
      return TextureImage( name )

  PROPERTIES
    asset        : AssetInfo
    opacity      = 1.0
    subdivisions = XY(0,0)  # for shader effects - XY(4,0) would draw a mesh composed of 16x1 quads

  METHODS
    method init( size=XY(1,1), color=Color(0) )
      internal_size = size

    method draw_bg
      if (not attributes.foreground and color.argb & 0xFF_000000)
        Renderer.fill(
          Box( internal_size),
          color.with_opacity(opacity),
          shader||Shader.ALPHA_COLOR,
          subdivisions
        )
      endIf

    method draw_fg
      if (attributes.foreground and color.argb & 0xFF_000000)
        Renderer.fill(
          Box( internal_size),
          color.with_opacity(opacity),
          shader||Shader.ALPHA_COLOR,
          subdivisions
        )
      endIf

endClass

augment Image[]
  METHODS
    method init( asset_name:String )
      local asset = AssetManager.find_image( asset_name )
      if (asset)
        reserve( asset.image_count )
        forEach (i in 0..<asset.image_count)
          add( TextureImage(asset, i) )
        endForEach
      else
        println "No such image collection: " + asset_name
      endIf

    method set_anchor( anchor:Anchor )
      (forEach in this).anchor = anchor

    method set_internal_size( size:XY )
      (forEach in this).internal_size = internal_size

    method set_scale( scale:Real )
      (forEach in this).scale = scale

    method set_scale( scale:XY )
      (forEach in this).scale = scale

    method set_shader( shader:Shader )
      (forEach in this).shader = shader

    method set_size( size:XY )
      (forEach in this).size = size

    method set_subdivisions( subdivisions:XY )
      (forEach in this).subdivisions = subdivisions

endAugment
