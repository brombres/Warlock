library Warlock

class Image : Drawable2D
  GLOBAL METHODS
    method create( name:String )->Image
      return TextureImage( name )

  PROPERTIES
    asset   : AssetInfo
    opacity = 1.0

  METHODS
    method init( size, color=Color(0) )
      internal_size = size

    method draw( position:XY ) [override]
      use Display.transform_stack
        .begin_draw
        Display.push_transform( Matrix.transform(XYZ(position,z),size,anchor,rotation,internal_size) )
        .inner_draw
        .end_draw
      endUse

    method draw( bounds:Box ) [override]
      use Display.transform_stack
        .begin_draw
        Display.push_transform( Matrix.transform(XYZ(bounds.position,z),bounds.size/internal_size) )
        .inner_draw
        .end_draw
      endUse

    method .inner_draw
      local is_foreground = attributes.foreground

      if (not is_foreground)
        if (color.argb & 0xFF_000000) Renderer.fill( Box(internal_size), color )
      endIf

      .draw

      if (is_foreground)
        if (color.argb & 0xFF_000000) Renderer.fill( Box(internal_size), color )
      endIf

endClass

augment Image[]
  METHODS
    method init( asset_name:String )
      local asset = AssetManager.find_image( asset_name )
      if (asset)
        reserve( asset.image_count )
        forEach (i in 0..<asset.image_count)
          add( TextureImage(asset, i) )
        endForEach
      else
        println "No such image collection: " + asset_name
      endIf
endAugment
