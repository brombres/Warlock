class GLRenderer : Renderer [singleton]
  NATIVE
    nativeHeader
    @|#include <SDL2/SDL.h>
     |#include <SDL2/SDL_opengles2.h>
     |#include <emscripten.h>
     |#include <emscripten/html5.h>
     |#include <GLES2/gl2.h>
     |#include <GLES2/gl2ext.h>

  DEFINITIONS
    VERTEX_BUFFER_SIZE = 4096

    PRIMITIVE_POINTS    = 1
    PRIMITIVE_LINES     = 2
    PRIMITIVE_TRIANGLES = 3
    PRIMITIVE_TRIANGLE_STRIP = 4  # Each vertex after the first three defines a new triangle using the previous two vertices

    COUNTER_CLOCKWISE = 0
    CLOCKWISE         = 1

  GLOBAL METHODS
    method dispatch_render [api]
      GLRenderer.render

  PROPERTIES
    native "SDL_Window *window;"
    native "SDL_GLContext gl_context;"
    native "GLuint position_buffer, color_buffer, uv_buffer;"

    is_configured    : Logical
    vertex_count     : Int32
    vertex_positions = Real32[]
    vertex_uvs       = Real32[]
    vertex_colors    = Int32[]

  METHODS
    method init
      Renderer = this

      native
      @|SDL_Init( SDL_INIT_VIDEO );
       |
       |SDL_GL_SetAttribute( SDL_GL_CONTEXT_PROFILE_MASK, SDL_GL_CONTEXT_PROFILE_ES );
       |SDL_GL_SetAttribute( SDL_GL_CONTEXT_MAJOR_VERSION, 2 );
       |SDL_GL_SetAttribute( SDL_GL_CONTEXT_MINOR_VERSION, 0 );
       |SDL_GL_SetAttribute( SDL_GL_DOUBLEBUFFER, 1 );
       |SDL_GL_SetAttribute( SDL_GL_ACCELERATED_VISUAL, 1 );
       |
       |double double_w, double_h;
       |emscripten_get_element_css_size( "#canvas", &double_w, &double_h );
       |int w = (int)double_w;
       |int h = (int)double_h;
       |printf("[Warlock] Initial window size %dx%d\n",w,h);
       |
       |$this->window = SDL_CreateWindow( "", SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED, w, h, SDL_WINDOW_OPENGL );
       |$this->gl_context = SDL_GL_CreateContext( $this->window );
       |
       |SDL_GL_MakeCurrent( $this->window, $this->gl_context );
       |
       |glClearColor(0,0,1,1);
       |glClear(GL_COLOR_BUFFER_BIT);

      COLOR_SHADER = ColorGLShader()
      trace max_texture_size

      # This emscripten call never returns
      native
      @|emscripten_set_main_loop( %Ns%RogueGLRenderer__dispatch_render, 0, 1 );

    method clear( color:Color ) [override]
      flush
      native
      @|int gl_flags = GL_COLOR_BUFFER_BIT;
       |int c = $color.argb;
       |gl_flags |= GL_COLOR_BUFFER_BIT;
       |glClearColor( ((c>>16)&255)/255.0f, ((c>>8)&255)/255.0f, (c&255)/255.0f, ((c>>24)&255)/255.0f );
       |glClear( gl_flags );

    method flush
      noAction

    method log_errors( where="":String )
      native @|GLenum error_code = glGetError();
              |if (error_code)
              |{
              |  switch (error_code)
              |  {
              |    case 1286: break;   // resizing the window - ignore
              |    default:
              |      ROGUE_LOG_ERROR( "OpenGL error %s: %d\n", $where->data->as_utf8, error_code );
              |  }
              |}

    method max_texture_size->Int32
      local result : Int32
      native @|GLint result = 0;
              |glGetIntegerv( GL_MAX_TEXTURE_SIZE, &result );
              |$result = (%Ns%RogueInt32) result;
      return result

    method render
      native
      @|//%Ns%RogueGLRenderer* renderer = %NS%ROGUE_SINGLETON(RogueGLRenderer);
       |//if (SDL_MUSTLOCK(renderer->surface)) SDL_LockSurface(renderer->surface);
       |//
       |////double double_w, double_h;
       |////emscripten_get_element_css_size( "#canvas", &double_w, &double_h );
       |////int w = (int)double_w;
       |////int h = (int)double_h;
       |////int w, h;
       |////SDL_GetWindowSize(renderer->window, &w, &h);
       |////printf("display size %dx%d\n",w,h);
       |//

      Warlock.render

      if (not is_configured)
        is_configured = true

        native @|glGenBuffers( 1, &$this->position_buffer );
                |glGenBuffers( 1, &$this->color_buffer );
                |glGenBuffers( 1, &$this->uv_buffer );
      endIf

endClass

augment Graphics::Bitmap
  GLOBAL METHODS
    method decode_png( bytes:Byte[] )->Bitmap
      return PNGDecoder().decode( bytes )
endAugment
