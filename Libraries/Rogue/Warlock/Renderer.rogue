library Warlock

class Renderer [singleton]
  PROPERTIES
    is_initialized : Logical
    frame          : Int
    data           = MeshBuilder(6144)
    primitive_type = <triangles>
    first_vertex   : Int
    first_index    : Int
    shader         : Shader

    render_queue   = DrawCommand[]

    swap_index     : Int

  METHODS
    method init
      Framework.configure

    method configure_window( window:Window )
      print_error

    method draw( line:Line, color:Color, shader=Shader.ALPHA_COLOR, thickness=1.0:Real )
      draw( Line<<XYZ>>(line.a,line.b), color, shader, thickness )

    method draw( line:Line<<XYZ>>, color:Color, shader=Shader.ALPHA_COLOR, thickness=1.0:Real )
      if (thickness == 1.0)
        draw_lines
        local i1 = data.vertices.count - first_vertex
        data.add Vertex( line.a, color )
        data.add Vertex( line.b, color )
        data.add( i1, i1+1 )
      endIf

    method draw_lines
      primitive_type = <lines>

    method draw_points
      primitive_type = <points>

    method draw_triangles
      primitive_type = <triangles>

    method fill( box:Box, color:Color, shader=Shader.ALPHA_COLOR )
      draw_triangles
      local i1 = data.vertices.count - first_vertex
      local a = box.position
      local b = box.top_right
      local c = box.bottom_right
      local d = box.bottom_left
      data.add Vertex( a, color )
      data.add Vertex( b, color )
      data.add Vertex( c, color )
      data.add Vertex( d, color )
      data.add( i1, i1+1, i1+2 )
      data.add( i1, i1+2, i1+3 )

    method flush
      local index_count = data.indices.count
      if (index_count == first_index) return
      local vertex_count = data.vertices.count

      render_queue.add(
        DrawCommand(
          primitive_type,
          first_vertex,
          vertex_count - first_vertex,
          first_index,
          index_count - first_index,
          Display.projection_transform,
          Display.view_transform,
          Display.object_transform,
          shader
        )
      )

      first_vertex = vertex_count
      first_index  = index_count

    method on_begin_render( window:Window )
      ++swap_index
      if (swap_index > 2) swap_index = 0
      reset

    method on_end_render( window:Window )
      flush
      ++frame

    method on_window_resized( window:Window )
      noAction

    method print_error
      Global.error.println "No Renderer is configured. Include BGFX to use the BGFX renderer."

    method reset
      data.clear
      draw_triangles
      first_vertex = 0
      first_index = 0
      shader = Shader.ALPHA_COLOR

    method set_primitive_type( new_type:GlobalID )
      if (primitive_type == new_type) return
      flush
      @primitive_type = new_type

    method set_shader( new_shader:Shader )
      if (shader is new_shader) return
      flush
      @shader = new_shader

    method uses_homogeneous_depth->Logical
      return true

endClass
