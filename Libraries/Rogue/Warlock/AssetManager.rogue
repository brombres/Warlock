library Warlock

class AssetManager [singleton]
  PROPERTIES
    scanner           : Scanner
    texture_filepaths = String[]
    assets            = [String:AssetInfo]
    is_loaded         : Logical

  METHODS
    method load
      if (is_loaded) return
      is_loaded = true

      if local file = Warlock.find_asset( "Assets/AssetManifest.txt" )
        Log.println "Loading AssetManifest.txt"
        scanner = Scanner( file )
        .load_texture_filepaths
        assets.clear
        while (.load_another_asset)
          noAction
        endWhile
        Log.println "# asset".pluralized(assets.count)
      else
        Global.error.println "[ERROR] Assets/AssetManifest.txt is missing."
      endIf

    method find_font( name:String )->AssetInfo
      load
      use work_name = StringPool
        if (not name.begins_with("Assets/"))
          work_name.print "Assets/"
          if (not name.begins_with("Graphics/"))
            work_name.print "Graphics/"
            if (not name.begins_with("Fonts/"))
              work_name.print "Fonts/"
            endIf
          endIf
        endIf
        work_name.print name

        return find_asset( work_name )
      endUse

    method find_image( name:String )->AssetInfo
      load
      use work_name = StringPool
        if (not name.begins_with("Assets/"))
          work_name.print "Assets/"
          if (not name.begins_with("Graphics/"))
            work_name.print "Graphics/"
          endIf
        endIf
        work_name.print name

        return find_asset( work_name )
      endUse

    method find_asset( name:String )->AssetInfo
      load
      use candidates = WorkList<<AssetInfo>>
        forEach (asset in assets.values)
          if (asset.filepath.begins_with(name)) candidates.add( asset )
        endForEach

        if (candidates.count)
          # Pick the candidate with the shortest filepath, e.g. "Alpha" matches
          # "Alpha.png" before "AlphaBravo.png".
          local min_length = candidates.first.filepath.count
          min_length .= or_smaller( (forEach in candidates from 1).filepath.count )
          forEach (candidate in candidates)
            if (candidate.filepath.count == min_length) return candidate
          endForEach
        endIf

        return null
      endUse

    method get( name:String )->AssetInfo
      load
      return assets[name]

    method .consume_ws( &eols )
      loop
        if (scanner.consume_whitespace) nextIteration
        if (eols and scanner.consume_eols) nextIteration
        if (scanner.consume('#'))
          scanner.read_line
          nextIteration
        endIf
        return
      endLoop

    method .load_texture_filepaths
      texture_filepaths.clear
      .consume_ws( &eols )
      if (not scanner.consume_identifier("textures")) return
      .consume_ws
      local n = scanner.scan_int
      loop (n)
        .consume_ws( &eols )
        texture_filepaths.add( scanner.read_line )
      endLoop

    method .load_another_asset->Logical
      .consume_ws( &eols )
      if (not scanner.has_another) return false

      local asset = AssetInfo( scanner.scan_string )

      .consume_ws
      local id = scanner.scan_identifier
      if (id == "image")
        if (not .load_image(asset)) return false
      elseIf (id == "font")
        if (not .load_font(asset)) return false
      else
        Console.error.println "Unknown asset type in AssetManifest.txt: " + id
        return false
      endIf

      if (not .load_images(asset)) return false

      assets[asset.filepath] = asset
      return true

    method .load_font( asset:AssetInfo )->Logical
      asset.type = <Font>
      .consume_ws
      asset.font_height = scanner.scan_int
      .consume_ws
      if (scanner.consume_identifier("variable")) asset.font_width = 0
      else                                        asset.font_width = scanner.scan_int
      .consume_ws
      asset.font_characters = scanner.scan_string
      .consume_ws( &eols )
      return true

    method .load_image( asset:AssetInfo )->Logical
      asset.type = <Image>
      .consume_ws( &eols )
      return true

    method .load_images( asset:AssetInfo )->Logical
      local n = asset.image_count
      if (not n) return true

      ensure <<asset.images>>
      loop n
        .consume_ws( &eols )
        local i = scanner.scan_int
        .consume_ws
        local x = scanner.scan_int
        .consume_ws
        local y = scanner.scan_int
        .consume_ws
        local w = scanner.scan_int
        .consume_ws
        local h = scanner.scan_int
        .consume_ws( &eols )
        asset.images.add( ImageInfo(i, Box(x,y,w,h)) )
      endLoop

      return true

endClass
