library Warlock

nativeHeader @|#include "WarlockInterface.h"

$include Warlock/Macros
$include Warlock/Display
$include Warlock/DisplayState
$include Warlock/Framework
$include Warlock/IDGenerator
$include Warlock/ProjectionMode
$include Warlock/Renderer
$include Warlock/Scene
$include Warlock/SceneState
$include Warlock/View
$include Warlock/ViewState
$include Warlock/Window

uses Control/State
uses Geometry [export]
uses Graphics [export]
uses Math/Matrix
uses UI

class Warlock [essential singleton]
  GLOBAL METHODS
    method configure [api]
      Warlock.on_configure

    method get_vs->Byte[] [api]
      #local filepath = Warlock.find_asset( "/Assets/Shaders/AlphaColor-VS.bin" )
      local filepath = Warlock.find_asset( "/Assets/Shaders/Cubes-VS.bin" )
      if (filepath) return Byte[]( File(filepath) )
      else          return null

    method get_fs->Byte[] [api]
      #local filepath = Warlock.find_asset( "/Assets/Shaders/AlphaColor-FS.bin" )
      local filepath = Warlock.find_asset( "/Assets/Shaders/Cubes-FS.bin" )
      if (filepath) return Byte[]( File(filepath) )
      else          return null

    method ortho->Matrix [api]
      #return Matrix.orthographic( -2, 2, -2, 2, 0, 100, 0, Renderer.uses_normalized_depth )
      #return Matrix.perspective( Radians(Degrees(90)), 1.78, 10, 100, not Renderer.uses_normalized_depth, &right_handed )
      return Matrix.look_at( XYZ(1,2,3), XYZ(4,5,6), XYZ(0,-1,0) )

    method render [api]
      Warlock.on_render

  PROPERTIES
    configured            : Logical
    windows               = Window[]

  METHODS
    method init
      println "Initializing Warlock"

    method add_window( window:Window )
      windows.add( window )

    method find_asset( name:String )->File?
      local filepath = native("WarlockInterface_find_asset($name)")->String
      if (filepath) return File( filepath )
      else          return null

      #{
    method find_image( name:String )->File?
      if local result = find_asset( name )
        return File(result)
      endIf

      if (not name.begins_with("Assets/"))
        if (name.begins_with("Images/")) name = "Assets"/name
        else                             name = "Assets/Images"/name
      endIf

      if local result = find_asset( name )
        return File(result)
      endIf

      forEach (ext in image_extensions)
        local filepath = "$.$"(name,ext)
        if local result = find_asset( filepath )
          return File(result)
        endIf
      endForEach

      return null
      }#

    method on_configure
      if (windows.is_empty)
        Window( "Warlock", 1280, 720 )
      endIf

    method on_render
      (forEach in windows).render

endClass
