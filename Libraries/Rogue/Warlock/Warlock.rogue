library Warlock

nativeHeader @|#include "WarlockInterface.h"

$include Warlock/Macros

$include Warlock/AssetInfo
$include Warlock/AssetManager
$include Warlock/BitmapIO
$include Warlock/Box
$include Warlock/Display
$include Warlock/DisplayState
$include Warlock/Drawable2D
$include Warlock/Font
$include Warlock/Framework
$include Warlock/IDGenerator
$include Warlock/Image
$include Warlock/ImageInfo
$include Warlock/Line
$include Warlock/Log
$include Warlock/MeshBuilder
$include Warlock/OverlayLog
$include Warlock/ProjectionMode
$include Warlock/Renderer
$include Warlock/RendererBatch
$include Warlock/Scene
$include Warlock/SceneState
$include Warlock/Shader
$include Warlock/State
$include Warlock/Texture
$include Warlock/TextureImage
$include Warlock/Triangle
$include Warlock/UpdateRegulator
$include Warlock/Vertex
$include Warlock/View
$include Warlock/ViewState
$include Warlock/Window

uses Control/State [export]
uses Entity        [export]
uses Geometry      [export]
uses Graphics      [export]
uses Math/Matrix   [export]
uses UI            [export]
uses Utility/Timer [export]

class Warlock [essential singleton]
  GLOBAL METHODS
    method configure [api]
      Warlock.on_configure

    method update->Logical [api]
      local keep_running = Framework.update_events

      OverlayLog.update
      Warlock.render
      return keep_running

  PROPERTIES
    configured     : Logical
    windows        = Window[]
    textures       = [File:Texture]

    update_regulator = UpdateRegulator()
    dt               : Real     # Delta Time - seconds since previous frame (may be 0.0)
    delta_ticks      : Int      # Ticks applied this frame (may be 0)
    ticks            : Int      # Lifetime tick count
    frames           : Int      # Lifetime frame count
    fps              = 60       # Current fps

  METHODS
    method init
      OverlayLog
      Log.println "Initializing Warlock"
      <Display.transform_modified>.on_signal( () => Renderer.flush )

    method add_window( window:Window )
      windows.add( window )

    method find_asset( name:String )->File?
      local filepath = native("WarlockInterface_find_asset($name)")->String
      if (filepath) return File( filepath )
      else          return null

    method find_window( id=null:Int?, native_id=null:Int? )->Window
      if local native_id = native_id
        forEach (window in windows)
          if (window.native_id == native_id) return window
        endForEach
      endIf

      if local id = id
        forEach (window in windows)
          if (window.id == id) return window
        endForEach
      endIf

      return null

    method load_asset_bytes( filepath:String )->Byte[]
      if (filepath) return Byte[]( File(filepath) )
      else          return null

    method on_configure
      AssetManager.load

      if (windows.is_empty)
        Window( "Warlock", 1280, 720 )
      endIf

    method render
      ++frames
      update_regulator.update
      if (frames < 5 and delta_ticks > 2)
        update_regulator.reset # max 2 updates per frame at start
      endIf

      (forEach in windows).begin_render

      if (delta_ticks)
        loop (delta_ticks)
          State = State.updated || State()
        endLoop
      elseIf (not State.is_started)
        # Make sure state's on_start() is called before its on_draw().
        State = State.updated || State()
      endIf
      State.on_update( dt )

      State.on_render
      (forEach in windows).render

      State.on_end_render
      (forEach in windows).end_render

endClass
