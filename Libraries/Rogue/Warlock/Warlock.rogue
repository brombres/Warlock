library Warlock

nativeHeader @|#include "WarlockInterface.h"

$include Warlock/Macros
$include Warlock/Display
$include Warlock/DisplayState
$include Warlock/Framework
$include Warlock/IDGenerator
$include Warlock/MeshBuilder
$include Warlock/ProjectionMode
$include Warlock/Renderer
$include Warlock/Scene
$include Warlock/SceneState
$include Warlock/Vertex
$include Warlock/View
$include Warlock/ViewState
$include Warlock/Window

uses Control/State
uses Geometry [export]
uses Graphics [export]
uses Math/Matrix
uses UI

class Warlock [essential singleton]
  GLOBAL METHODS
    method configure [api]
      Warlock.on_configure

    method get_vs->Byte[] [api]
      #local filepath = Warlock.find_asset( "/Assets/Shaders/AlphaColor-VS.bin" )
      local filepath = Warlock.find_asset( "/Assets/Shaders/Cubes-VS.bin" )
      if (filepath) return Byte[]( File(filepath) )
      else          return null

    method get_fs->Byte[] [api]
      #local filepath = Warlock.find_asset( "/Assets/Shaders/AlphaColor-FS.bin" )
      local filepath = Warlock.find_asset( "/Assets/Shaders/Cubes-FS.bin" )
      if (filepath) return Byte[]( File(filepath) )
      else          return null

    method m_proj->Matrix32 [api]
      return Matrix.perspective(
        Degrees(60),
        1280.0/720.0,
        0.1, 100,
        &homogeneous_depth=Renderer.uses_homogeneous_depth,
      )->Matrix32

    method m_view->Matrix32 [api]
      return Matrix.look_at( XYZ(0,0,-5), XYZ.zero )->Matrix32

    method m_xform( n:Int )->Matrix32 [api]
      return Matrix.rotate_xy( RadiansXY( n*0.01, n*0.01 ) )

    method get_mesh->MeshBuilder [api]
      return mesh

    method render [api]
      Warlock.on_render

  GLOBAL PROPERTIES
    mesh = MeshBuilder()

  PROPERTIES
    configured            : Logical
    windows               = Window[]

  METHODS
    method init
      println "Initializing Warlock"

      mesh.add( Vertex(XYZ(-1, 1,-1), Color.BLACK) )
      mesh.add( Vertex(XYZ( 1, 1,-1), Color.RED) )
      mesh.add( Vertex(XYZ(-1,-1,-1), Color.GREEN) )
      mesh.add( Vertex(XYZ( 1,-1,-1), Color.YELLOW) )
      mesh.add( Vertex(XYZ(-1, 1, 1), Color.BLUE) )
      mesh.add( Vertex(XYZ( 1, 1, 1), Color.MAGENTA) )
      mesh.add( Vertex(XYZ(-1,-1, 1), Color.CYAN) )
      mesh.add( Vertex(XYZ( 1,-1, 1), Color.WHITE) )
      mesh.add(
        [
          0, 1, 2,
          1, 3, 2,
          4, 6, 5,
          5, 6, 7,
          0, 2, 4,
          4, 2, 6,
          1, 5, 3,
          5, 7, 3,
          0, 4, 1,
          4, 5, 1,
          2, 3, 6,
          6, 3, 7
        ]
      )

      #{
static PosColorVertex cubeVertices[] =
{
    {-1.0f,  1.0f, -1.0f, 0xff000000 },
    { 1.0f,  1.0f, -1.0f, 0xff0000ff },
    {-1.0f, -1.0f, -1.0f, 0xff00ff00 },
    { 1.0f, -1.0f, -1.0f, 0xff00ffff },
    {-1.0f,  1.0f,  1.0f, 0xffff0000 },
    { 1.0f,  1.0f,  1.0f, 0xffff00ff },
    {-1.0f, -1.0f,  1.0f, 0xffffff00 },
    { 1.0f, -1.0f,  1.0f, 0xffffffff },
};

static const uint16_t cubeTriList[] =
{
    0, 1, 2,
    1, 3, 2,
    4, 6, 5,
    5, 6, 7,
    0, 2, 4,
    4, 2, 6,
    1, 5, 3,
    5, 7, 3,
    0, 4, 1,
    4, 5, 1,
    2, 3, 6,
    6, 3, 7,
};

}#
    method add_window( window:Window )
      windows.add( window )

    method find_asset( name:String )->File?
      local filepath = native("WarlockInterface_find_asset($name)")->String
      if (filepath) return File( filepath )
      else          return null

      #{
    method find_image( name:String )->File?
      if local result = find_asset( name )
        return File(result)
      endIf

      if (not name.begins_with("Assets/"))
        if (name.begins_with("Images/")) name = "Assets"/name
        else                             name = "Assets/Images"/name
      endIf

      if local result = find_asset( name )
        return File(result)
      endIf

      forEach (ext in image_extensions)
        local filepath = "$.$"(name,ext)
        if local result = find_asset( filepath )
          return File(result)
        endIf
      endForEach

      return null
      }#

    method on_configure
      if (windows.is_empty)
        Window( "Warlock", 1280, 720 )
      endIf

    method on_render
      (forEach in windows).render

endClass
