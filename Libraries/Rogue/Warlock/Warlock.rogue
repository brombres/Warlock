library Warlock

nativeHeader @|#include "WarlockInterface.h"

$include Warlock/Macros

$include Warlock/AppState
$include Warlock/AssetInfo
$include Warlock/AssetManager
$include Warlock/Bitmap
$include Warlock/BitmapIO
$include Warlock/BlendMode
$include Warlock/Box
$include Warlock/Canvas
$include Warlock/Display
$include Warlock/DisplayState
$include Warlock/Drawable2D
$include Warlock/Entity
$include Warlock/Font
$include Warlock/Framework
$include Warlock/IDManager
$include Warlock/Image/ColorFillImage
$include Warlock/Image/Image
$include Warlock/Image/ImageInfo
$include Warlock/Image/PatchImage
$include Warlock/Image/RenderTargetImage
$include Warlock/Image/TextureImage
$include Warlock/Line
$include Warlock/Log
$include Warlock/MeshBuilder
$include Warlock/OverlayLog
$include Warlock/ProjectionMode
$include Warlock/Quad
$include Warlock/Renderer
$include Warlock/RenderTargetTexture
$include Warlock/RendererBatch
$include Warlock/Screen
#$include Warlock/Scene
#$include Warlock/SceneState
$include Warlock/Shader
$include Warlock/Spine
$include Warlock/SystemFont
$include Warlock/WarlockState
$include Warlock/Texture
#$include Warlock/TileMapLayout
$include Warlock/Triangle
$include Warlock/Vertex
$include Warlock/WarlockUI
$include Warlock/Window

uses Control/State [export]
uses Entity        [export]
uses Geometry      [export]
uses Graphics      [export]
uses Math/Matrix   [export]
uses UI            [export]
uses Utility/Timer [export]

class Warlock [essential singleton]
  GLOBAL METHODS
    method configure [api]
      Warlock.on_configure

    method handle_event->Logical [api]
      local keep_running = Framework.handle_native_event

      if (not keep_running)
        use list = Warlock.windows.working_copy
          (forEach in list).close
        endUse
      endIf

      return keep_running


    method update->Logical [api]
      OverlayLog.update
      Warlock.render
      ++Warlock.frames

      return true  # keep running

  PROPERTIES
    configured     : Logical
    windows        = Window[]
    textures       = [File:Texture]
    frames         : Int

  METHODS
    method init
      OverlayLog
      Log.println "Initializing Warlock"
      <Display.transform_modified>.on_signal( () => Renderer.flush )

    method add_window( window:Window )
      windows.add( window )

    method find_asset( name:String )->File?
      local filepath = native("WarlockInterface_find_asset($name)")->String
      if (filepath) return File( filepath )
      else          return null

    method find_data_file( file:File )->File?
      if (not file.filepath.begins_with("Assets/Data/"))
        if (file.filepath.begins_with("Data/")) file = "Assets"/file
        else                                    file = "Assets/Data"/file
      endIf

      return find_asset( file.filepath )

    method find_window( id=null:Int?, native_id=null:Int? )->Window
      if local native_id = native_id
        forEach (window in windows)
          if (window.native_id == native_id) return window
        endForEach
      endIf

      if local id = id
        forEach (window in windows)
          if (window.id == id) return window
        endForEach
      endIf

      return null

    method load_asset_bytes( filepath:String )->Byte[]
      if (filepath) return Byte[]( File(filepath) )
      else          return null

    method on_configure
      AssetManager.load

      if (windows.is_empty)
        Window( "Warlock", 1280, 720 )
      endIf

    method render
      (forEach in windows).begin_render

      AppState = AppState.updated || AppState()

      AppState.on_render_begin
      (forEach in windows).render

      AppState.on_render_end
      (forEach in windows).end_render

endClass
