library Warlock

class MeshBuilder
  PROPERTIES
    vertices = Vertex[]
    indices  = Int[]

  METHODS
    method init( default_capacity=0:Int )
      if (default_capacity) reserve( default_capacity )

    method add( index:Int )
      indices.add( index )

    method add( i1:Int, i2:Int )
      indices.reserve( 2 )
      indices.[ add(i1), add(i2) ]

    method add( i1:Int, i2:Int, i3:Int )
      indices.reserve( 3 )
      indices.[ add(i1), add(i2), add(i3) ]

    method add( indices:Int[] )
      this.indices.add( indices )

    method add( other:MeshBuilder, first_vertex=0:Int )
      vertices.reserve( other.vertices.count )
      indices.reserve( other.indices.count )
      local i0 = this.vertices.count - first_vertex
      vertices.add( other.vertices )
      forEach (index in other.indices)
        indices.add( index + i0 )
      endForEach

    method add( vertex:Vertex, &auto_index )->Int
      local index = vertices.count
      if (auto_index) indices.add( vertices.count )
      vertices.add( vertex )
      return index

    method add( vertices:Vertex[] )->Int
      local index = vertices.count
      this.vertices.add( vertices )
      return index

    method clear
      vertices.clear
      indices.clear

    method fill( texture:Texture )
      Renderer.shader = Shader.ALPHA_TEXTURE
      Renderer.texture = texture
      Renderer.draw_triangles
      Renderer.data.add( this, Renderer.first_vertex )

    method reserve( vertex_count:Int, index_count=null:Int?  )
      # Reserves capacity for an additional 'vertex_count' vertices and 'index_count'
      # (default: same as 'vertex_count') vertices.
      if (not index_count) index_count = vertex_count
      vertices.reserve( vertex_count )
      indices.reserve( vertex_count * index_count.value )
endClass
