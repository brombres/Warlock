library Warlock

class Display [singleton]
  AUTO_ID

  PROPERTIES
    state         : DisplayState
    current_state : DisplayState  # set after update, good for remainder of render

    size : XY

    projection_mode = ProjectionMode2DX : ProjectionMode

    perspective_center : XY
    # The proportional "origin" for 2D+ perspective and the vanishing point for
    # polygons parallel to the camera axis.  Automatically reset to (0.5,0.5)
    # at the beginning of every draw.

    clear_color   = Color.BLACK : Color
    should_clear_color  : Logical

    transform_stack       : TransformStackState  # 'use Display.transform_stack / ... / endUse'
    projection_transform  : Matrix
    view_transform        : Matrix
    object_transform      : Matrix
    transform             : Matrix   # projection * view * object
    object_transforms     = Matrix[]
    combined_transform_modified    = true

  METHODS
    method at( p:XY )->XY
      return p * size

    method begin_render
      Display = this
      reset
      loop (Warlock.delta_ticks)
        state = state.updated || DisplayState()
        current_state = state
        current_state.update
        current_state.update( Warlock.dt )
      endLoop

    method bounds->Box
      return Box( size )

    method center->XY
      return size/2

    method clear
      should_clear_color = true

    method clear( clear_color )
      should_clear_color = true

    method combined_transform->Matrix
      # projection * world * object
      if (combined_transform_modified)
        transform = projection_transform * view_transform * object_transform
        combined_transform_modified = false
      endIf
      return @transform

    method draw
      on_draw
      on_end_draw

    method end_render
      Display = this
      current_state.on_end_render

    method height->Real
      return size.y

    method on_draw
      #trace Renderer.uses_normalized_depth

    method on_end_draw

    method on_update

    method on_update( dt:Real )

    method push_transform( m:Matrix )
      if (object_transforms.count)
        object_transforms.add( object_transforms.last * m )
      else
        object_transforms.add( m )
      endIf
      set_object_transform( object_transforms.last, &pushed )

    method pop_transform( n=1:Int32 )
      forEach (1..n.or_smaller(object_transforms.count))
        object_transforms.remove_last
      endForEach
      if (object_transforms.count) object_transform = object_transforms.last
      else                         object_transform = Matrix.identity

    method render
      Display = this
      current_state.on_render
      current_state.draw

    method reset
      perspective_center = XY(0.5,0.5)
      projection_mode.update
      view_transform   = Matrix.identity
      object_transform = Matrix.identity
      object_transforms.clear
      should_clear_color = false

    method set_perspective_center( new_center:XY )
      if (perspective_center != new_center)
        @perspective_center = new_center
        projection_mode.update
      endIf

    method set_projection_mode( new_mode:ProjectionMode )
      if (projection_mode != new_mode)
        @projection_mode = new_mode
        projection_mode.update
      endIf

    method set_object_transform( new_transform:Matrix, &pushed )
      if (not pushed) object_transforms.clear
      if (object_transform != new_transform)
        <Display.transform_modified>.signal
        @object_transform = new_transform
        combined_transform_modified = true
      endIf

    method set_projection_transform( new_transform:Matrix )
      if (projection_transform != new_transform)
        <Display.transform_modified>.signal
        @projection_transform = new_transform
        combined_transform_modified = true
      endIf

    method set_view_transform( new_transform:Matrix )
      if (view_transform != new_transform)
        <Display.transform_modified>.signal
        @view_transform = new_transform
        combined_transform_modified = true
      endIf

    method update
      on_update

    method update( dt:Real )
      on_update( dt )

    method width->Real
      return size.x

endClass

class TransformStackState( original_stack_count:Int ) [compound]
  METHODS
    method on_use->this [mutating]
      original_stack_count = Display.object_transforms.count
      return this

    method on_end_use( state:TransformStackState )
      local n = Display.object_transforms.count - state.original_stack_count
      if (n) Display.pop_transform( n )
endClass
