library Warlock

class Display [singleton]
  AUTO_ID

  PROPERTIES
    state : DisplayState

    size : XY

    projection_mode = ProjectionMode2DX : ProjectionMode

    perspective_center : XY
    # The proportional "origin" for 3D perspective and the vanishing point for
    # polygons parallel to the camera axis.  Automatically reset to (0.5,0.5)
    # at the beginning of every draw.

    projection_transform  : Matrix
    view_transform        : Matrix
    object_transform      : Matrix
    view_transforms       = Matrix[]
    object_transforms     = Matrix[]

  METHODS
    method draw
      on_draw
      on_end_draw

    method height->Real
      return size.y

    method on_draw
      #trace Renderer.uses_normalized_depth

    method on_end_draw

    method on_end_update

    method on_update

    method push_object_transform( m:Matrix )
      if (object_transforms.count)
        object_transforms.add( object_transforms.last * m )
      else
        object_transforms.add( m )
      endIf
      set_object_transform( object_transforms.last, &pushed )

    method push_view_transform( m:Matrix )
      if (view_transforms.count)
        view_transforms.add( view_transforms.last * m )
      else
        view_transforms.add( m )
      endIf
      set_view_transform( view_transforms.last, &pushed )

    method pop_object_transform( n=1:Int32 )
      forEach (1..n.or_smaller(object_transforms.count))
        object_transforms.remove_last
      endForEach
      if (object_transforms.count) object_transform = object_transforms.last
      else                         object_transform = Matrix.identity

    method pop_view_transform( n=1:Int32 )
      forEach (1..n.or_smaller(view_transforms.count))
        view_transforms.remove_last
      endForEach
      if (view_transforms.count) view_transform = view_transforms.last
      else                       view_transform = Matrix.identity

    method render
      Display = this
      render_begin
      state.update
      state.draw
      render_end

    method render_begin
      reset
      state = state.updated || DisplayState()
      state.on_render

    method render_end
      state.on_end_render

    method reset
      projection_mode.reset
      view_transform   = Matrix.identity
      object_transform = Matrix.identity
      view_transforms.clear
      object_transforms.clear

    method set_projection_mode( new_mode:ProjectionMode )
      if (projection_mode != new_mode)
        @projection_mode = new_mode
        projection_mode.reset
      endIf

    method set_object_transform( new_transform:Matrix, &pushed )
      if (not pushed) object_transforms.clear
      if (object_transform != new_transform)
        <Display.transform_modified>.signal
        @object_transform = new_transform
      endIf

    method set_projection_transform( new_transform:Matrix )
      if (projection_transform != new_transform)
        <Display.transform_modified>.signal
        @projection_transform = new_transform
      endIf

    method set_view_transform( new_transform:Matrix, &pushed )
      if (not pushed) view_transforms.clear
      if (view_transform != new_transform)
        <Display.transform_modified>.signal
        @view_transform = new_transform
      endIf

    method update
      on_update
      on_end_update

    method width->Real
      return size.x

endClass
