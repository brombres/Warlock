library Warlock

class TextureImage : Image
  PROPERTIES
    texture     : Texture
    image_index : Int

  METHODS
    method init( texture )
      nominal_size = texture.size
      size = nominal_size

    method init( asset, image_index )
      nominal_size = asset.images[image_index].bounds.size
      size         = nominal_size

    method init( asset_name:String )
      local asset = AssetManager.find_image( asset_name )
      if (asset)
        init( asset, 0 )
      else
        println "No such image: " + asset_name
      endIf

    method init( existing:TextureImage )
      prior.init( existing )
      texture     = existing.texture
      image_index = existing.image_index

    method load [override]
      # Ensures image is fully loaded.
      texture  # will load if necessary

    method texture->Texture [override]
      if (not @texture and asset)
        texture = asset.images[image_index].texture( &mipmaps )
        # actually loads texture if necessary
      endIf
      return @texture

    method .draw_entity [override]
      local color = color.with_opacity( opacity )
      local bounds = Box( nominal_size )
      if (texture)
        local h_flip = attributes.h_flip
        local v_flip = attributes.v_flip
        local shader = shader || Shader.ALPHA_TEXTURE
        Renderer.fill( bounds, texture, color, shader, &=subdivisions, &=h_flip, &=v_flip )
      else
        Renderer.fill( bounds, color, shader||Shader.ALPHA_COLOR, &=subdivisions )
      endIf

endClass
