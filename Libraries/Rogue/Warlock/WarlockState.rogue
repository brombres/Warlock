library Warlock

class WarlockState<<$ExtendedType,$change_state,$exit_state>> : Rogue::State<<$ExtendedType,$change_state,$exit_state>>
  PROPERTIES
    actions : Action

  METHODS
    method dispatch( e:KeyEvent )
      noAction

    method dispatch( e:PointerEvent )
      noAction

    method dispatch( e:ScrollEvent )
      noAction

    method dispatch( e:TextEvent )
      noAction

    method dispatch_draw( &fg )
      noAction

    method dispatch_update
      noAction

    method draw( &fg )
      if (fg)
        on_draw_fg
        dispatch_draw( &fg )
      else
        on_draw
        dispatch_draw( &!fg )
      endIf

    method handle( e:KeyEvent )
      contingent
        on( e )
        necessary (not e.is_consumed)

        dispatch( e )
        necessary (not e.is_consumed)

        on_unhandled( e )
      endContingent

    method handle( e:PointerEvent )
      contingent
        on( e )
        necessary (not e.is_consumed)

        dispatch( e )
        necessary (not e.is_consumed)

        on_unhandled( e )
      endContingent

    method handle( e:ScrollEvent )
      contingent
        dispatch( e )
        necessary (not e.is_consumed)

        on_unhandled( e )
      endContingent

    method handle( e:TextEvent )
      contingent
        on( e )
        necessary (not e.is_consumed)

        dispatch( e )
        necessary (not e.is_consumed)

        on_unhandled( e )
      endContingent

    method on( e:KeyEvent )

    method on( e:PointerEvent )

    method on( e:ScrollEvent )

    method on( e:TextEvent )

    method on_draw

    method on_draw_fg

    method on_render_begin

    method on_render_end

    method on_unhandled( e:KeyEvent )

    method on_unhandled( e:PointerEvent )

    method on_unhandled( e:ScrollEvent )

    method on_unhandled( e:TextEvent )

    method update [override]
      actions = actions?.updated
      prior.update
      dispatch_update
endClass
