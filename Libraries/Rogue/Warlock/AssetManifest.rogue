library Warlock

class AssetManifest [singleton]
  PROPERTIES
    scanner           : Scanner
    texture_filepaths = String[]
    assets            = [String:AssetInfo]

  METHODS
    method load
      if local file = Warlock.find_asset( "Assets/AssetManifest.txt" )
        Log.println "Loading AssetManifest.txt"
        scanner = Scanner( file )
        .load_texture_filepaths
        assets.clear
        while (.load_another_asset)
          noAction
        endWhile
        Log.println "# asset".pluralized(assets.count)
      else
        Global.error.println "[ERROR] Assets/AssetManifest.txt is missing."
      endIf

    method .consume_ws( &eols )
      loop
        if (scanner.consume_whitespace) nextIteration
        if (eols and scanner.consume_eols) nextIteration
        if (scanner.consume('#'))
          scanner.read_line
          nextIteration
        endIf
        return
      endLoop

    method .load_texture_filepaths
      texture_filepaths.clear
      .consume_ws( &eols )
      if (not scanner.consume_identifier("textures")) return
      .consume_ws
      local n = scanner.scan_int
      loop (n)
        .consume_ws( &eols )
        texture_filepaths.add( scanner.read_line )
      endLoop

    method .load_another_asset->Logical
      .consume_ws( &eols )
      if (not scanner.has_another) return false

      local asset = AssetInfo( scanner.scan_string )

      .consume_ws
      local id = scanner.scan_identifier
      if (id == "image")
        if (not .load_image(asset)) return false
      elseIf (id == "font")
        if (not .load_font(asset)) return false
      else
        Console.error.println "Unknown asset type in AssetManifest.txt: " + id
        return false
      endIf

      if (not .load_images(asset)) return false

      assets[asset.filepath] = asset
      return true

    method .load_font( asset:AssetInfo )->Logical
      asset.type = <Font>
      .consume_ws
      asset.font_height = scanner.scan_int
      .consume_ws
      if (scanner.consume_identifier("variable")) asset.font_width = -1
      else                                        asset.font_width = scanner.scan_int
      .consume_ws
      asset.font_characters = scanner.scan_string
      .consume_ws( &eols )
      return true

    method .load_image( asset:AssetInfo )->Logical
      asset.type = <Image>
      .consume_ws( &eols )
      return true

    method .load_images( asset:AssetInfo )->Logical
      local n = asset.image_count
      if (not n) return true

      ensure <<asset.images>>
      loop n
        .consume_ws( &eols )
        local i = scanner.scan_int
        .consume_ws
        local x = scanner.scan_int
        .consume_ws
        local y = scanner.scan_int
        .consume_ws
        local w = scanner.scan_int
        .consume_ws
        local h = scanner.scan_int
        .consume_ws( &eols )
        asset.images.add( ImageInfo(i, Box(x,y,w,h)) )
      endLoop

      return true

endClass
