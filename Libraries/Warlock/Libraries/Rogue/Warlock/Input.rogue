module Warlock

class Input [singleton]
  METHODS
    method update
      native
      @|SDL_Event e;
       |while (SDL_PollEvent(&e))
       |{
       |  switch (e.type)
       |  {
       |    case SDL_QUIT:
              System.exit
      native
      @|    case SDL_MOUSEBUTTONDOWN:
       |    case SDL_MOUSEBUTTONUP:
       |    {
       |      //int which;
       |      switch (e.button.button)
       |      {
       |        case SDL_BUTTON_LEFT:
       |          //which = 0;
       |          break;
       |        case SDL_BUTTON_RIGHT:
       |          //which = 1;
       |          break;
       |        default:
       |          continue;
       |      }
       |      if (e.type == SDL_MOUSEBUTTONDOWN)
       |      {
       |        //printf("BUTTON PRESSED\n");
       |        //w->on_mouse_down(e.button.x, e.button.y, which);
       |      }
       |      else
       |      {
       |        //printf("BUTTON RELEASED\n");
       |        //w->on_mouse_up(e.button.x, e.button.y, which);
       |      }
       |      break;
       |    }
       |    case SDL_MOUSEMOTION:
       |    {
       |      //auto w = plasmacore_get_window(e.motion.windowID);
       |      //if (!w) break;
       |      //w->on_mouse_move(e.motion.x, e.motion.y);
       |      break;
       |    }
       |    case SDL_MOUSEWHEEL:
       |    {
       |      //auto w = plasmacore_get_window(e.motion.windowID);
       |      //if (!w) break;
       |      //w->on_scroll(-e.wheel.x, e.wheel.y);
       |      break;
       |    }
       |    case SDL_KEYDOWN:
       |    {
       |      //auto w = plasmacore_get_window(e.key.windowID);
       |      //if (!w) break;
       |      //w->on_key_event( e.key.keysym.scancode, true, !!e.key.repeat );
       |      break;
       |    }
       |    case SDL_KEYUP:
       |    {
       |      //auto w = plasmacore_get_window(e.key.windowID);
       |      //if (!w) break;
       |      //w->on_key_event( e.key.keysym.scancode, false, false );
       |      break;
       |    }
       |
       |    // Mobile web SDL receives both stylus and mouse pointer events, so we'll ignore the stylus events to avoid duplicates.
       |    //case SDL_FINGERMOTION:
       |    //{
       |    //  auto m = PlasmacoreMessage( "Input.on_stylus_event" );
       |    //  m.set( "type", 0 );  // 0=move
       |    //  m.set( "x", e.tfinger.x );
       |    //  m.set( "y", e.tfinger.y );
       |    //  m.post();
       |    //  break;
       |    //}
       |    //case SDL_FINGERDOWN:
       |    //{
       |    //  auto m = PlasmacoreMessage( "Input.on_stylus_event" );
       |    //  m.set( "type", 1 );  // 1=press
       |    //  m.set( "x", e.tfinger.x );
       |    //  m.set( "y", e.tfinger.y );
       |    //  m.post();
       |    //  break;
       |    //}
       |    //case SDL_FINGERUP:
       |    //{
       |    //  auto m = PlasmacoreMessage( "Input.on_stylus_event" );
       |    //  m.set( "type", 2 );  // 2=release
       |    //  m.set( "x", e.tfinger.x );
       |    //  m.set( "y", e.tfinger.y );
       |    //  m.post();
       |    //  break;
       |    //}
       |    case SDL_WINDOWEVENT:
       |    {
       |      //printf("SDL window event %d\n",(int)e.window.event);
       |      //auto w = plasmacore_get_window(e.button.windowID);
       |      //if (!w) break;
       |      //switch (e.window.event)
       |      //{
       |      //  case SDL_WINDOWEVENT_FOCUS_GAINED:
       |      //    w->on_focus_gained();
       |      //    break;
       |      //}
       |      break;
       |    }
       |    case SDL_USEREVENT:
       |    {
       |      //if (e.user.code == ASYNC_CALL_EVENT)
       |      //{
       |      //  // The following cast is theoretically not allowed.  Let's hope
       |      //  // it works anyway on platforms we care about.
       |      //  void (*f) (void*) = (void (*)(void*))e.user.data1;
       |      //  f(0);
       |      //}
       |      break;
       |    }
       |  }
       |}
endClass
