class Colors( a:Color, b:Color, c:Color, d:Color, count=4:Int32 ) [compound]
  GLOBAL METHODS
    method create( color:Color )->Colors
      return Colors( color, color, color, color, 4 )

    method create( a:Color, b:Color )->Colors
      return Colors( a, b, Color(0), Color(0), 2 )

    method create( a:Color, b:Color, c:Color )->Colors
      return Colors( a, b, c, Color(0), 3 )

    method create( color:Int32 )->Colors
      return Colors( Color(color), Color(color), Color(color), Color(color), 4 )

    method create( a:Int32, b:Int32 )->Colors
      return Colors( Color(a), Color(b), Color(0), Color(0), 2 )

    method create( a:Int32, b:Int32, c:Int32 )->Colors
      return Colors( Color(a), Color(b), Color(c), Color(0), 3 )

    method create( a:Int32, b:Int32, c:Int32, d:Int32, count=4:Int32 )->Colors
      return Colors( Color(a), Color(b), Color(c), Color(d), count )

  METHODS
    method is_opaque->Logical
      which (count)
        case 0: return true
        case 1: return ((a.argb & 0xFF000000) == 0xFF000000)
        case 2: return ((a.argb & b.argb & 0xFF000000) == 0xFF000000)
        case 3: return ((a.argb & b.argb & c.argb & 0xFF000000) == 0xFF000000)
        case 4: return ((a.argb & b.argb & c.argb & d.argb & 0xFF000000) == 0xFF000000)
        others: return false
      endWhich

    method is_opaque_white->Logical
      which (count)
        case 0: return true
        case 1: return ((a.argb) == 0xFFFFFFFF)
        case 2: return ((a.argb & b.argb) == 0xFFFFFFFF)
        case 3: return ((a.argb & b.argb & c.argb) == 0xFFFFFFFF)
        case 4: return ((a.argb & b.argb & c.argb & d.argb) == 0xFFFFFFFF)
        others: return false
      endWhich

    method operator&( n:Int32 )->Colors
      return Colors( a.argb&n, b.argb&n, c.argb&n, d.argb&n, count )

    method operator|( n:Int32 )->Colors
      return Colors( a.argb|n, b.argb|n, c.argb|n, d.argb|n, count )

    method operator!->Colors
      return Colors( !a.argb, !b.argb, !c.argb, !d.argb, count )

    method description->String
      which (count)
        case 1: return a->String
        case 2: return "[$,$]" (a,b)
        case 3: return "[$,$,$]" (a,b,c)
        others: return "[$,$,$,$]" (a,b,c,d)
      endWhich

    method with_opacity( opacity:Real64 )->Colors
      if (opacity == 1.0) return this

      which (count)
        case 0: return this
        case 1: return Colors( a.with_opacity(opacity), b, c, d, 1 )
        case 2: return Colors( a.with_opacity(opacity), b.with_opacity(opacity), c, d, 2 )
        case 3: return Colors( a.with_opacity(opacity), b.with_opacity(opacity), c.with_opacity(opacity), d, 3 )
        case 4: return Colors( a.with_opacity(opacity), b.with_opacity(opacity), c.with_opacity(opacity), d.with_opacity(opacity), 4 )
        others: return this
      endWhich
endClass
