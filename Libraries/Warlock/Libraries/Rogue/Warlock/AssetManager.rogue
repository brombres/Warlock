nativeHeader
@|#if defined(ROGUE_PLATFORM_WEB)
 |  #include <emscripten/fetch.h>
 |  #define EMSCRIPTEN_FETCH_TYPE emscripten_fetch_t
 |#else
 |  #define EMSCRIPTEN_FETCH_TYPE void
 |#endif

ROGUE_NATIVE_POINTER_TYPE<< "EMSCRIPTEN_FETCH_TYPE*", RogueEmscriptenFetch>>

class AssetManager [singleton]
  NATIVE
    nativeHeader
    @|#if defined(ROGUE_PLATFORM_WEB)
     |void RogueAssetManager_download_failed( emscripten_fetch_t* fetch );
     |void RogueAssetManager_download_succeeded( emscripten_fetch_t* fetch );
     |#endif

    nativeCode
    @|#if defined(ROGUE_PLATFORM_WEB)
     |void RogueAssetManager_download_failed( emscripten_fetch_t* fetch )
     |{
     |  RogueAssetManager__on_download__RogueEmscriptenFetch_RogueLogical(
     |    ROGUE_SINGLETON(RogueAssetManager),
     |    ROGUE_COMPOUND(RogueEmscriptenFetch){fetch},
     |    0
     |  );
     |  emscripten_fetch_close(fetch);
     |}
     |
     |void RogueAssetManager_download_succeeded( emscripten_fetch_t* fetch )
     |{
     |  RogueAssetManager__on_download__RogueEmscriptenFetch_RogueLogical(
     |    ROGUE_SINGLETON(RogueAssetManager),
     |    ROGUE_COMPOUND(RogueEmscriptenFetch){fetch},
     |    1
     |  );
     |  emscripten_fetch_close(fetch);
     |}
     |#endif

  PROPERTIES
    active_downloads = Asset[]
    requested_count  : Int32
    downloaded_count : Int32

  METHODS
    method download( asset:Asset )
      if (active_downloads.count)
        ++requested_count
      else
        requested_count = 1
        downloaded_count = 1
      endIf

      active_downloads.add( asset )

      native
      @|#if defined(ROGUE_PLATFORM_WEB)
       |emscripten_fetch_attr_t attr;
       |emscripten_fetch_attr_init( &attr );
       |strcpy( attr.requestMethod, "GET" );
       |attr.attributes = EMSCRIPTEN_FETCH_LOAD_TO_MEMORY | EMSCRIPTEN_FETCH_PERSIST_FILE;
       |attr.userData = (void*) $asset;
       |attr.onsuccess = RogueAssetManager_download_succeeded;
       |attr.onerror = RogueAssetManager_download_failed;
       |emscripten_fetch( &attr, $asset->url->data->as_utf8 );
       |#endif

    method on_download( fetch:RogueEmscriptenFetch, success:Logical ) [api]
      native @|#if defined(ROGUE_PLATFORM_WEB)

      local asset = native("(RogueAsset*)$fetch.value->userData")->Asset
      if (success)
        local byte_count = native("(RogueInt32)$fetch.value->numBytes")->Int32
        asset.bytes = Dim<<Byte>>( byte_count )
        native @|memcpy( $asset->bytes->as_bytes, $fetch.value->data, $byte_count );
      else
        local status_code = native("(RogueInt32)$fetch.value->status")->Int32
        asset.error = "HTTP Status $"(status_code)
      endIf

      active_downloads.remove( asset )
      ++downloaded_count

      if (asset.callback) asset.callback( asset )

      native @|#endif

    method progress->Real
      if (not requested_count) return 1.0
      return downloaded_count->Real / requested_count
endClass
