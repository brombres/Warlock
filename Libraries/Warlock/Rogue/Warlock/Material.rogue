module Warlock

class Material : Asset<<Material>>
  PROPERTIES
    topology                  : Topology
    primitive_restart_enabled : Logical
    shaders                   = Shader[]
    textures                  = [TextureLayer:Texture]

  METHODS
    method init( texture:Texture )
      local shaders = Renderer.standard_shaders
      init( shaders//texture_vertex_shader, shaders//texture_fragment_shader )
      set_texture( texture )

    method init( topology=Topology.TRIANGLE_LIST, primitive_restart_enabled=false )

    method init( vertex_shader:Shader, fragment_shader:Shader,
        topology=Topology.TRIANGLE_LIST, primitive_restart_enabled=false )
      add_shader( vertex_shader )
      add_shader( fragment_shader )

    method add_shader( shader:Shader )
      prepared = false

      forEach (existing at i in shaders)
        if (existing.stage == shader.stage)
          shaders[i] = shader
          return
        endIf
      endForEach

      shaders.add( shader )

    method clear_texture( layer=TextureLayer.ALBEDO:TextureLayer )
      textures.remove( layer )

    method destroy [override]
      if (prepared)
        Renderer.free_material( this )
        prepared = false
      endIf

    method prepare
      if (prepared) return

      (forEach in textures).prepare
      (forEach in shaders).prepare
      Renderer.define_material( this )
      prepared = true

    method set_topology( @topology )
      prepared = false

    method set_primitive_restart_enabled( @primitive_restart_enabled )
      prepared = false

    method set_shader( index:Int, shader:Shader )
      shaders.expand_to_include( index )
      shaders[index] = shader
      prepared = false

    method set_texture( texture:Texture, layer=TextureLayer.ALBEDO:TextureLayer )
      textures[layer] = texture

endClass
