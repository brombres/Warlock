module Warlock

nativeHeader @|#include "WarlockInterface.h"

uses Geometry [export]
uses Graphics [export]
uses Math/Matrix

$include Asset
$include Display
$include IDBank
$include Image
$include Material
$include ProjectionMode
$include RenderCmd
$include Renderer
$include ResourceBank
$include Shader
$include Texture
$include Topology
$include Vertex
$include Window

class Warlock [essential singleton]
  GLOBAL PROPERTIES
    image_extensions = ["png","jpg","jpeg"]

  PROPERTIES
    windows = ResourceBank<<Window>>()
    image = Image( "Warlock" )
    alpha = Image( "Alpha" )
    color_vertex_shader = Shader(
      ShaderStage.VERTEX,
      "Color Vertex Shader",
      @|#version 450
       |#extension GL_ARB_separate_shader_objects : enable
       |
       |layout (location = 0) in vec4 position;
       |layout (location = 1) in vec4 color;
       |
       |layout (location = 0) out vec4 frag_color;
       |
       |void main ()
       |{
       |  gl_Position = position;
       |  frag_color = color;
       |}
    )
    color_fragment_shader = Shader(
      ShaderStage.FRAGMENT,
      "Color Fragment Shader",
      @|#version 450
       |#extension GL_ARB_separate_shader_objects : enable
       |
       |layout (location = 0) in  vec4 color;
       |layout (location = 0) out vec4 output_color;
       |
       |void main () { output_color = color; }
    )
    material = Material( color_vertex_shader, color_fragment_shader )

    rendering = false # false during initial configuration; permanently set to true afterwards

  METHODS
    method init
      println "Initializing Warlock"
      Window( "Warlock" )
      material.prepare

    method find_asset( name:String )->File?
      local filepath = native("WarlockInterface_find_asset($name)")->String
      if (filepath) return File( filepath )
      else          return null

    method find_image( name:String )->File?
      if local result = find_asset( name )
        return File(result)
      endIf

      if (not name.begins_with("Assets/"))
        if (name.begins_with("Images/")) name = "Assets"/name
        else                             name = "Assets/Images"/name
      endIf

      if local result = find_asset( name )
        return File(result)
      endIf

      forEach (ext in image_extensions)
        local filepath = "$.$"(name,ext)
        if local result = find_asset( filepath )
          return File(result)
        endIf
      endForEach

      return null

  GLOBAL PROPERTIES
    degrees = Degrees(0)

  GLOBAL METHODS
    method begin_render( window_id:Int, display_width:Int, display_height:Int )->Byte[] [api]
      Display.begin_draw( display_width, display_height )

      local w = display_width->Real
      local h = display_height->Real

      Warlock.rendering = true

      local pt = XY(0,w.or_smaller(h)*0.5).rotated( degrees )
      degrees += Degrees(1)

      local triangle = Triangle(
        XY(w/2,h/2) + pt,
        XY(w/2,h/2) + pt.rotated( Degrees(120) )
        XY(w/2,h/2) + pt.rotated( Degrees(240) )
      )

      #Warlock.image.draw( Box(-w/2,-h/2,w,h) )
      Warlock.image.draw( Box(0,0,w,h) )

      local alpha = Warlock.alpha
      alpha.draw( Box(Display.center - alpha.size/2, alpha.size) )

      Renderer.draw( triangle, Color.WHITE )
      Renderer.fill( triangle, Color.YELLOW.with_alpha(0.25) )
      Renderer.draw( triangle, Color.RED.with_alpha(0.5) );

      Display.push_object_transform( Matrix.translate(XY(Display.center)) )
      Display.push_object_transform( Matrix.rotate_y(Degrees(45)) )
      Display.push_object_transform( Matrix.translate(-XY(Display.center)) )
      Renderer.fill( Box(w/4,h/4,w/2,h/2), Color.CYAN.with_alpha(0.25) )
      Display.pop_object_transform( 3 )

      Display.end_draw

      return Renderer.finalized_render_data

    method end_render( window_id:Int ) [api]
      Renderer.reset

endClass
