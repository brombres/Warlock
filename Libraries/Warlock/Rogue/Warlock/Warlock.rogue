module Warlock

nativeHeader @|#include "WarlockInterface.h"

uses Geometry [export]
uses Graphics [export]

$include Asset
$include IDBank
$include Image
$include RenderCmd
$include Renderer
$include ResourceBank
$include Texture
$include Vertex
$include Window

class Warlock [essential singleton]
  GLOBAL PROPERTIES
    image_extensions = ["png","jpg","jpeg"]

  PROPERTIES
    windows = ResourceBank<<Window>>()
    image = Image( "Warlock" )

    rendering = false # false during initial configuration; permanently set to true afterwards

  METHODS
    method init
      println "Initializing Warlock"
      Window( "Warlock" )
      #trace img.id
      #@trace find_image( "Warlock" )
      #if local file = find_asset( "Assets/Images/Warlock.png" )
      #local bitmap = Bitmap( file )
      #endIf

    method find_asset( name:String )->File?
      local filepath = native("WarlockInterface_find_asset($name)")->String
      if (filepath) return File( filepath )
      else          return null

    method find_image( name:String )->File?
      if local result = find_asset( name )
        return File(result)
      endIf

      if (not name.begins_with("Assets/"))
        if (name.begins_with("Images/")) name = "Assets"/name
        else                             name = "Assets/Images"/name
      endIf

      if local result = find_asset( name )
        return File(result)
      endIf

      forEach (ext in image_extensions)
        local filepath = "$.$"(name,ext)
        if local result = find_asset( filepath )
          return File(result)
        endIf
      endForEach

      return null

  GLOBAL PROPERTIES
    degrees = Degrees(0)

  GLOBAL METHODS
    method begin_render( window_id:Int, display_width:Int, display_height:Int )->Byte[] [api]
      @trace display_width, display_height
      Warlock.rendering = true

      local pt = XY(0,-0.5).rotated( degrees )
      degrees += Degrees(1)

      local triangle = Triangle(
        pt,
        pt.rotated( Degrees(120) )
        pt.rotated( Degrees(240) )
      )

      Warlock.image.draw( Box(-1,-1,2,2) )
      Renderer.draw( triangle, Color.YELLOW )

      return Renderer.finalized_render_data

    method end_render( window_id:Int ) [api]
      Renderer.reset

endClass
