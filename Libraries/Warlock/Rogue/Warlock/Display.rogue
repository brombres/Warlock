module Warlock

class Display [singleton]
  PROPERTIES
    width, height : Int

    projection_mode : ProjectionMode

    perspective_center : XY
    # The proportional "origin" for 3D perspective and the vanishing point for
    # polygons parallel to the camera axis.  Automatically reset to (0.5,0.5)
    # at the beginning of every draw.

    #clip       : Box?
    #clip_stack = Box?[]

    projection_transform  : Matrix
    transform             : Matrix
    world_transform       : Matrix  # Combination of view and object transforms
    view_transform        = Matrix.identity : Matrix
    object_transform      = Matrix.identity : Matrix
    view_transforms       = Matrix[]
    object_transforms     = Matrix[]

    transform_modified       : Logical
    view_transform_modified  : Logical
    world_transform_modified : Logical

  METHODS
    method begin_draw( width, height )
      projection_mode = ProjectionMode2DX
      perspective_center = XY(0.5,0.5)
      clear_transforms

    method bounds->Box
      return Box(0,0,size)

    method center->XY
      return size / 2

    method clear_transforms
      Renderer.flush
      object_transforms.clear
      view_transforms.clear
      world_transform_modified = true
      transform_modified = true

    method end_draw
      noAction

    method push_object_transform( m:Matrix )
      if (object_transforms.count)
        object_transforms.add( object_transforms.last * m )
      else
        object_transforms.add( m )
      endIf
      @object_transform = object_transforms.last
      world_transform_modified = true
      transform_modified = true

    method push_view_transform( m:Matrix )
      if (view_transforms.count)
        view_transforms.add( view_transforms.last * m )
      else
        view_transforms.add( m )
      endIf
      @view_transform = view_transforms.last
      world_transform_modified = true
      transform_modified = true

    method pop_object_transform( n=1:Int32 )
      forEach (1..n.or_smaller(object_transforms.count))
        object_transforms.remove_last
      endForEach
      if (object_transforms.count) object_transform = object_transforms.last
      else                         object_transform = Matrix.identity
      world_transform_modified = true
      transform_modified = true

    method pop_view_transform( n=1:Int32 )
      forEach (1..n.or_smaller(view_transforms.count))
        view_transforms.remove_last
      endForEach
      if (view_transforms.count) view_transform = view_transforms.last
      else                       view_transform = Matrix.identity
      world_transform_modified = true
      transform_modified = true

    method set_perspective_center( new_center:XY )
      if (new_center != perspective_center)
        @perspective_center = new_center
        projection_mode.update
      endIf

    method set_projection_mode( @projection_mode )
      projection_mode?.update

    method size->XY
      return XY( width, height )

    method transform->Matrix
      if (transform_modified)
        transform_modified = false
        Renderer.flush
        transform = projection_transform * world_transform
      endIf
      return @transform

    method world_transform->Matrix
      if (not world_transform_modified) return @world_transform

      world_transform_modified = false
      if (view_transforms.count)
        if (object_transforms.count)
          world_transform = view_transform * object_transform
        else
          world_transform = view_transform
        endIf
      else
        if (object_transforms.count)
          world_transform = object_transform
        else
          world_transform = Matrix.identity
        endIf
      endIf

      return @world_transform
endClass
