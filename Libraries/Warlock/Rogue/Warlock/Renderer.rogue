module Warlock

enum PrimitiveType
  UNDEFINED,
  TRIANGLES,
  LINES
endEnum

class Renderer [singleton]
  DEFINITIONS
    VERSION = 1

    TOTAL_COUNT_INDEX = 0
    VCOUNT_INDEX      = 2

  PROPERTIES
    render_data        = DataWriter()

    vertices           = Vertex[]
    primitive_type     : PrimitiveType

    total_vertex_count : Int

  METHODS
    method init
      reset

    method reset
      primitive_type = PrimitiveType.UNDEFINED
      vertices.clear
      total_vertex_count = 0
      render_data.reset
      render_data.write_int32( VERSION )
      render_data.write_int32( 0 )  # total vertex count

    method draw( triangle:Triangle, color:Color )
      primitive_type = PrimitiveType.LINES
      local argb = color.argb
      vertices.add( Vertex(triangle.a,argb) )
      vertices.add( Vertex(triangle.b,argb) )
      vertices.add( Vertex(triangle.b,argb) )
      vertices.add( Vertex(triangle.c,argb) )
      vertices.add( Vertex(triangle.c,argb) )
      vertices.add( Vertex(triangle.a,argb) )

    method fill( triangle:Triangle, color:Color )
      primitive_type = PrimitiveType.TRIANGLES
      local argb = color.argb
      vertices.add( Vertex(triangle.a,argb,XY(0,0)) )
      vertices.add( Vertex(triangle.b,argb,XY(1,1)) )
      vertices.add( Vertex(triangle.c,argb,XY(0,1)) )

    method finalized_render_data->Byte[]
      flush
      render_data.write_int32x( RenderCmd.END_DRAWING )
      render_data.seek( 4 )
      render_data.write_int32( total_vertex_count )
      return render_data.output_bytes

    method flush
      if (vertices.is_empty) return

      which (primitive_type)

        case TRIANGLES
          render_data.write_int32x( RenderCmd.DRAW_TRIANGLES )
          render_data.write_int32x( vertices.count / 3 )
          local data_count_pos = render_data.position
          render_data.write_int32( 0 )
          forEach (v in vertices)
            render_data.write_real32( v.x )
            render_data.write_real32( v.y )
            render_data.write_real32( v.z )
            render_data.write_int32( v.color )
          endForEach
          render_data.patch_int32( data_count_pos, (render_data.position - data_count_pos) - 4 )

        case LINES
          render_data.write_int32x( RenderCmd.DRAW_LINES )
          render_data.write_int32x( vertices.count / 2 )
          local data_count_pos = render_data.position
          render_data.write_int32( 0 )
          forEach (v in vertices)
            render_data.write_real32( v.x )
            render_data.write_real32( v.y )
            render_data.write_real32( v.z )
            render_data.write_int32( v.color )
          endForEach
          render_data.patch_int32( data_count_pos, (render_data.position - data_count_pos) - 4 )

      endWhich

      total_vertex_count += vertices.count
      vertices.clear

    method load_texture( id:Int, name:String )
      flush
      if local file = Warlock.find_image( name )
        if local bitmap = Bitmap.load( file )
          render_data.write_int32x( RenderCmd.LOAD_TEXTURE )
          render_data.write_int32x( id )
          render_data.write_int32x( bitmap.width )
          render_data.write_int32x( bitmap.height )
          render_data.write_colors( bitmap.pixels )
        else
          error.println "[Warlock] Error loading '$' - unable to decode image."(file)
        endIf
      else
        error.println "[Warlock] Error loading '$' - file not found."(name)
      endIf

    method set_primitive_type( new_type:PrimitiveType )
      if (new_type == @primitive_type) return
      flush
      @primitive_type = new_type
endClass
