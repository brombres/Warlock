module Warlock

enum PrimitiveType
  UNDEFINED,
  TRIANGLES,
  TEXTURED_TRIANGLES,
  LINES
endEnum

class Renderer [singleton]
  DEFINITIONS
    VERSION = 1

    TOTAL_COUNT_INDEX = 0
    VCOUNT_INDEX      = 2

  PROPERTIES
    render_data        = DataWriter()

    vertices           = Vertex[]
    primitive_type     : PrimitiveType
    texture            : Texture

    total_vertex_count : Int

  METHODS
    method init
      reset

    method reset
      primitive_type = PrimitiveType.UNDEFINED
      texture = null
      vertices.clear
      total_vertex_count = 0
      render_data.reset
      render_data.write_int32( VERSION )
      render_data.write_int32( 0 )  # total vertex count

    method add_vertex( position:XY, color:Color )
      vertices.add( Vertex(XYZW(position,2000,1),color) )

    method add_vertex( position:XY, color:Color, uv:XY )
      vertices.add( Vertex(XYZW(position,2000,1),color,uv) )

    method draw( triangle:Triangle, color:Color )
      primitive_type = PrimitiveType.LINES
      add_vertex( triangle.a, color )
      add_vertex( triangle.b, color )
      add_vertex( triangle.b, color )
      add_vertex( triangle.c, color )
      add_vertex( triangle.c, color )
      add_vertex( triangle.a, color )

    method fill( box:Box, color:Color )
      local tl = box.position
      local tr = box.top_right
      local br = box.bottom_right
      local bl = box.bottom_left
      fill( Triangle(tl,tr,br), color )
      fill( Triangle(br,bl,tl), color )

    method fill( triangle:Triangle, color:Color )
      primitive_type = PrimitiveType.TRIANGLES
      add_vertex( triangle.a, color )
      add_vertex( triangle.b, color )
      add_vertex( triangle.c, color )

    method fill( triangle:Triangle, texture, uv:Triangle, color=Color.WHITE:Color )
      primitive_type = PrimitiveType.TEXTURED_TRIANGLES
      add_vertex( triangle.a, color, uv.a )
      add_vertex( triangle.b, color, uv.b )
      add_vertex( triangle.c, color, uv.c )

    method finalized_render_data->Byte[]
      flush
      render_data.write_int32x( RenderCmd.END_DRAWING )
      render_data.seek( 4 )
      render_data.write_int32( total_vertex_count )
      return render_data.output_bytes

    method flush
      if (vertices.is_empty) return

      local transform = Display.transform
      forEach (vertex in rewriter=vertices.rewriter)
        local pos = Display.transform * vertex.position
        vertex.position = pos / pos.w
        rewriter.write( vertex )
      endForEach

      which (primitive_type)

        case TRIANGLES
          render_data.write_int32x( RenderCmd.DRAW_TRIANGLES )
          render_data.write_int32x( vertices.count / 3 )
          local data_count_pos = render_data.position
          render_data.write_int32( 0 )
          forEach (v in vertices)
            render_data.write_real32( v.position.x )
            render_data.write_real32( v.position.y )
            render_data.write_real32( v.position.z )
            render_data.write_real32( v.position.w )
            render_data.write_int32( v.color.argb )
          endForEach
          render_data.patch_int32( data_count_pos, (render_data.position - data_count_pos) - 4 )

        case TEXTURED_TRIANGLES
          render_data.write_int32x( RenderCmd.DRAW_TEXTURED_TRIANGLES )
          if (texture) render_data.write_int32x( texture.id )
          else         render_data.write_int32x( 0 )
          render_data.write_int32x( vertices.count / 3 )
          local data_count_pos = render_data.position
          render_data.write_int32( 0 )
          forEach (v in vertices)
            render_data.write_real32( v.position.x )
            render_data.write_real32( v.position.y )
            render_data.write_real32( v.position.z )
            render_data.write_real32( v.position.w )
            render_data.write_int32( v.color.argb )
            render_data.write_real32( v.uv.x )
            render_data.write_real32( v.uv.y )
          endForEach
          render_data.patch_int32( data_count_pos, (render_data.position - data_count_pos) - 4 )

        case LINES
          render_data.write_int32x( RenderCmd.DRAW_LINES )
          render_data.write_int32x( vertices.count / 2 )
          local data_count_pos = render_data.position
          render_data.write_int32( 0 )
          forEach (v in vertices)
            render_data.write_real32( v.position.x )
            render_data.write_real32( v.position.y )
            render_data.write_real32( v.position.z )
            render_data.write_real32( v.position.w )
            render_data.write_int32( v.color.argb )
          endForEach
          render_data.patch_int32( data_count_pos, (render_data.position - data_count_pos) - 4 )

      endWhich

      total_vertex_count += vertices.count
      vertices.clear

    method free_texture( id:Int )
      render_data.write_int32x( RenderCmd.FREE_TEXTURE )
      render_data.write_int32x( id )

    method define_texture( id:Int, bitmap:Bitmap )
      flush
      render_data.write_int32x( RenderCmd.DEFINE_TEXTURE )
      render_data.write_int32x( id )
      render_data.write_int32x( bitmap.width )
      render_data.write_int32x( bitmap.height )
      render_data.write_colors( bitmap.pixels )

    method find_texture( name:String )->Texture
      return null

    method set_primitive_type( new_type:PrimitiveType )
      if (new_type == @primitive_type) return
      flush
      @primitive_type = new_type

    method set_texture( new_texture:Texture )
      if (texture is new_texture) return
      flush
      @texture = new_texture
      if (new_texture) new_texture.load

endClass
