module Warlock

enum PrimitiveType
  UNDEFINED,
  TRIANGLES,
  TEXTURED_TRIANGLES,
  LINES
endEnum

class Renderer [singleton]
  DEFINITIONS
    VERSION = 1

    TOTAL_COUNT_INDEX = 0
    VCOUNT_INDEX      = 2

  PROPERTIES
    render_data        = DataWriter()
    cmd_data           = DataWriter()

    vertices           = Vertex[]
    primitive_type     : PrimitiveType
    texture            : Texture

    transformed_vertex_count : Int
    total_vertex_count       : Int
    flushing           = false

  METHODS
    method init
      reset

    method reset
      primitive_type = PrimitiveType.UNDEFINED
      texture = null
      vertices.clear
      transformed_vertex_count = 0
      total_vertex_count = 0
      render_data.clear
      render_data.write_int32( VERSION )
      render_data.write_int32( 0 )  # total dynamic vertex count

    method add_vertex( position:XY, color:Color )
      vertices.add( Vertex(XYZW(position,0,1),color) )

    method add_vertex( position:XY, color:Color, uv:XY )
      vertices.add( Vertex(XYZW(position,0,1),color,uv) )

    method apply_vertex_transform
      if (transformed_vertex_count == vertices.count) return

      local transform = Display.transform
      forEach (vertex in rewriter=vertices.rewriter(&starting_index=transformed_vertex_count))
        local pos = Display.transform * vertex.position
        vertex.position = pos / pos.w
        rewriter.write( vertex )
      endForEach
      transformed_vertex_count = vertices.count

    method define_material( material:Material )
      .begin_command( RenderCmd.DEFINE_MATERIAL )
      cmd_data.write_int32x( material.id )
      cmd_data.write_int32x( material.topology )
      cmd_data.write_int32x( material.primitive_restart_enabled )
      cmd_data.write_int32x( material.shaders.count )
      cmd_data.write_int32x( (forEach in material.shaders).id )
      .end_command

    method define_shader( shader:Shader )
      .begin_command( RenderCmd.DEFINE_SHADER )
      cmd_data.write_int32x( shader.id )
      cmd_data.write_int32x( shader.stage )
      cmd_data.write_string( shader.filename )
      cmd_data.write_string( shader.main_fn_name )
      if (shader.source)
        cmd_data.write_logical( true )
        cmd_data.write_string( shader.source )
      else
        cmd_data.write_logical( false )
        cmd_data.write_bytes( shader.spirv )
      endIf
      .end_command

    method define_texture( texture:Texture )
      .begin_command( RenderCmd.DEFINE_TEXTURE )
      cmd_data.write_int32x( texture.id )
      cmd_data.write_int32x( texture.bitmap.width )
      cmd_data.write_int32x( texture.bitmap.height )
      cmd_data.write_colors( texture.bitmap.pixels )
      .end_command

    method draw( triangle:Triangle, color:Color )
      primitive_type = PrimitiveType.LINES
      add_vertex( triangle.a, color )
      add_vertex( triangle.b, color )
      add_vertex( triangle.b, color )
      add_vertex( triangle.c, color )
      add_vertex( triangle.c, color )
      add_vertex( triangle.a, color )

    method fill( box:Box, color:Color )
      local tl = box.position
      local tr = box.top_right
      local br = box.bottom_right
      local bl = box.bottom_left
      fill( Triangle(tl,tr,br), color )
      fill( Triangle(br,bl,tl), color )

    method fill( triangle:Triangle, color:Color )
      primitive_type = PrimitiveType.TRIANGLES
      add_vertex( triangle.a, color )
      add_vertex( triangle.b, color )
      add_vertex( triangle.c, color )

    method fill( triangle:Triangle, texture, uv:Triangle, color=Color.WHITE:Color )
      primitive_type = PrimitiveType.TEXTURED_TRIANGLES
      add_vertex( triangle.a, color, uv.a )
      add_vertex( triangle.b, color, uv.b )
      add_vertex( triangle.c, color, uv.c )

    method finalized_render_data->Byte[]
      .begin_command( RenderCmd.END_DRAWING )
      .end_command
      render_data.patch_int32( 4, total_vertex_count )
      return render_data.output_bytes

    method find_texture( name:String )->Texture
      return null

    method flush
      if (vertices.is_empty) return

      if (flushing) return
      flushing = true

      apply_vertex_transform

      which (primitive_type)

        case TRIANGLES
          .begin_command( RenderCmd.DRAW_TRIANGLES )
          cmd_data.write_int32x( vertices.count / 3 )
          forEach (v in vertices)
            cmd_data.write_real32( v.position.x )
            cmd_data.write_real32( v.position.y )
            cmd_data.write_real32( v.position.z )
            cmd_data.write_real32( v.position.w )
            cmd_data.write_int32( v.color.argb )
          endForEach

        case TEXTURED_TRIANGLES
          .begin_command( RenderCmd.DRAW_TEXTURED_TRIANGLES )
          if (texture) cmd_data.write_int32x( texture.id )
          else         cmd_data.write_int32x( 0 )
          cmd_data.write_int32x( vertices.count / 3 )
          forEach (v in vertices)
            cmd_data.write_real32( v.position.x )
            cmd_data.write_real32( v.position.y )
            cmd_data.write_real32( v.position.z )
            cmd_data.write_real32( v.position.w )
            cmd_data.write_int32( v.color.argb )
            cmd_data.write_real32( v.uv.x )
            cmd_data.write_real32( v.uv.y )
          endForEach

        case LINES
          .begin_command( RenderCmd.DRAW_LINES )
          cmd_data.write_int32x( vertices.count / 2 )
          forEach (v in vertices)
            cmd_data.write_real32( v.position.x )
            cmd_data.write_real32( v.position.y )
            cmd_data.write_real32( v.position.z )
            cmd_data.write_real32( v.position.w )
            cmd_data.write_int32( v.color.argb )
          endForEach

      endWhich

      .end_command

      total_vertex_count += vertices.count
      vertices.clear
      transformed_vertex_count = 0

      flushing = false

    method free_material( material:Material )
      .begin_command( RenderCmd.FREE_MATERIAL )
      cmd_data.write_int32x( material.id )
      .end_command

    method free_shader( shader:Shader )
      .begin_command( RenderCmd.FREE_SHADER )
      cmd_data.write_int32x( shader.id )
      .end_command

    method free_texture( texture:Texture )
      .begin_command( RenderCmd.FREE_TEXTURE )
      cmd_data.write_int32x( texture.id )
      .end_command

    method set_primitive_type( new_type:PrimitiveType )
      if (new_type == @primitive_type) return
      flush
      @primitive_type = new_type

    method set_texture( new_texture:Texture )
      if (texture is new_texture) return
      flush
      @texture = new_texture
      if (new_texture) new_texture.prepare

    method .begin_command( cmd:RenderCmd )
      flush
      cmd_data.write_int32x( cmd )

    method .end_command
      render_data.write_int32x( cmd_data.output_bytes.count )
      render_data.write( cmd_data.output_bytes )
      cmd_data.clear

endClass
