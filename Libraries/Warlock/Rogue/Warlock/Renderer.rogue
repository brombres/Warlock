module Warlock

enum PrimitiveType
  UNDEFINED,
  TRIANGLES,
  LINES
endEnum

class Renderer [singleton]
  DEFINITIONS
    VERSION = 1

    TOTAL_COUNT_INDEX = 0
    VCOUNT_INDEX      = 2

  PROPERTIES
    cmd_data           = RenderCmdData[]
    cur_vertex_data    = Vertex[]
    all_vertex_data    = Vertex[]
    finalized_cmd_data = RenderCmdData[]
    primitive_type     : PrimitiveType

  METHODS
    method init
      clear

    method clear
      cmd_data.clear
      all_vertex_data.clear
      cur_vertex_data.clear
      primitive_type = PrimitiveType.UNDEFINED

    method draw( triangle:Triangle, color:Color )
      primitive_type = PrimitiveType.LINES
      local argb = color.argb
      cur_vertex_data.add( Vertex(triangle.a,argb) )
      cur_vertex_data.add( Vertex(triangle.b,argb) )
      cur_vertex_data.add( Vertex(triangle.b,argb) )
      cur_vertex_data.add( Vertex(triangle.c,argb) )
      cur_vertex_data.add( Vertex(triangle.c,argb) )
      cur_vertex_data.add( Vertex(triangle.a,argb) )

    method fill( triangle:Triangle, color:Color )
      primitive_type = PrimitiveType.TRIANGLES
      local argb = color.argb
      cur_vertex_data.add( Vertex(triangle.a,argb) )
      cur_vertex_data.add( Vertex(triangle.b,argb) )
      cur_vertex_data.add( Vertex(triangle.c,argb) )

    method finalized_cmd_data->RenderCmdData[]
      flush

      local total_count = cmd_data.count + all_vertex_data.count*Vertex.PROPERTY_COUNT + 4
      @finalized_cmd_data.clear
      @finalized_cmd_data.reserve( total_count )
      @finalized_cmd_data.add( total_count )
      @finalized_cmd_data.add( VERSION )

      @finalized_cmd_data.add( RenderCmd.VERTEX_DATA )
      @finalized_cmd_data.add( all_vertex_data.count )

      # all_vertex_data: copy to finalized_cmd_data
      local n_vertex_slots = all_vertex_data.count * Vertex.PROPERTY_COUNT
      native
      @|memcpy(
       |  $finalized_cmd_data->as_int32s + $finalized_cmd_data->count,
       |  $all_vertex_data->as_int32s,
       |  $n_vertex_slots * 4
       |);
      @finalized_cmd_data.count += n_vertex_slots

      @finalized_cmd_data.add( cmd_data )

      return @finalized_cmd_data

    method flush
      if (cur_vertex_data.is_empty) return

      which (primitive_type)
        case TRIANGLES
          cmd_data.add( RenderCmd.DRAW_TRIANGLES )
          cmd_data.add( cur_vertex_data.count )
        case LINES
          cmd_data.add( RenderCmd.DRAW_LINES )
          cmd_data.add( cur_vertex_data.count )
      endWhich

      all_vertex_data.add( cur_vertex_data )
      cur_vertex_data.clear

    method set_primitive_type( new_type:PrimitiveType )
      if (new_type == @primitive_type) return
      flush
      @primitive_type = new_type
endClass
